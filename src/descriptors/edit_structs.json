[
    {
        "struct_name": "Add",
        "docstring": "Add new column `col` filled with `val`",
        "fields": [
            {
                "name": "col",
                "comment": "name of new column",
                "data_type": "Symbol"
            },
            {
                "name": "val",
                "comment": "value to add to new column",
                "data_type": "Any"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Combine",
        "docstring": "",
        "fields": [
            {
                "name": "operation",
                "comment": "operation to perform (+, -, *, /)",
                "data_type": "String"
            },
            {
                "name": "output",
                "comment": "",
                "data_type": "Array{Symbol,1}"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Drop",
        "docstring": "Remove information from the dataframe - either an entire column or rows containing specified values.",
        "fields": [
            {
                "name": "col",
                "comment": "name of column containing data to remove",
                "data_type": "Symbol"
            },
            {
                "name": "val",
                "comment": "value to drop",
                "data_type": "Any"
            },
            {
                "name": "operation",
                "comment": "how to determine what to drop",
                "data_type": "String"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Describe",
        "docstring": "This DataType is required when multiple DataFrames will be appended into one output file (say, if multiple sheets from an XLSX file are included). Before the DataFrames are appended, a column `col` will be added and filled with the value in the file descriptor. !!!! Does it make sense to have a DataType with one field?",
        "fields": [
            {
                "name": "col",
                "comment": "name of new column",
                "data_type": "Symbol"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Group",
        "docstring": "Use to edit files containing data in successive dataframes with an identifying header cell or row.",
        "fields": [
            {
                "name": "file",
                "comment": "mapping .csv file name in the coremaps directory. The mapping file should correlate with the header information identifying each data group. It will be used to separate the header rows from data.",
                "data_type": "String"
            },
            {
                "name": "from",
                "comment": "name of the mapping column containing input values",
                "data_type": "Symbol"
            },
            {
                "name": "to",
                "comment": "name of the mapping column containing output values",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "input",
                "comment": "name of the input column containing",
                "data_type": "Symbol"
            },
            {
                "name": "output",
                "comment": "name of the output column created",
                "data_type": "Array{Symbol,1}"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Map",
        "docstring": "Define an `output` column containing values based on those in an `input` column. The mapping columns `from` -> `to` are contained in a .csv `file` in the coremaps directory. The columns `input` and `from` should contain the same values, as should `output` and `to`.",
        "fields": [
            {
                "name": "file",
                "comment": "mapping .csv file name in the coremaps directory",
                "data_type": "String"
            },
            {
                "name": "from",
                "comment": "name of the mapping column containing input values",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "to",
                "comment": "name of the mapping column containing output values",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "input",
                "comment": "name of the input column to map",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "output",
                "comment": "name of the output column created",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "kind",
                "comment": "type of join to perform.",
                "data_type": "Symbol"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Melt",
        "docstring": "Normalize the dataframe by 'melting' columns into rows, lengthening the dataframe by duplicating values in the column `on` into new rows and defining 2 new columns: 1. `var` with header names from the original dataframe. 2. `val` with column values from the original dataframe. This operation can only be performed once per dataframe.",
        "fields": [
            {
                "name": "on",
                "comment": "name of column(s) NOT included in melt",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "var",
                "comment": "name of column containing header NAMES from the original dataframe",
                "data_type": "Symbol"
            },
            {
                "name": "val",
                "comment": "name of column containing VALUES from the original dataframe",
                "data_type": "Symbol"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Operate",
        "docstring": "Perform an arithmetic operation across multiple DataFrame columns.",
        "fields": [
            {
                "name": "operation",
                "comment": "operation to perform (+, -, *, /)",
                "data_type": "String"
            },
            {
                "name": "from",
                "comment": "name of original comment column (ex. units)",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "to",
                "comment": "name of new comment column (ex. units)",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "input",
                "comment": "names of columns on which to operate",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "output",
                "comment": "name of result column",
                "data_type": "Symbol"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Order",
        "docstring": "Rearranges columns in the order specified by `cols` and sets them to the specified type.",
        "fields": [
            {
                "name": "col",
                "comment": "Ordered list of DataFrame columns",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "type",
                "comment": "Ordered column types.",
                "data_type": "Array{DataType,1}"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Rename",
        "docstring": "Change column name `from` -> `to`.",
        "fields": [
            {
                "name": "from",
                "comment": "original column name",
                "data_type": "Symbol"
            },
            {
                "name": "to",
                "comment": "new column name",
                "data_type": "Symbol"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Replace",
        "docstring": "Replace values in `col` `from` -> `to`.",
        "fields": [
            {
                "name": "col",
                "comment": "name of column containing values to be replaced",
                "data_type": "Symbol"
            },
            {
                "name": "from",
                "comment": "value to replace",
                "data_type": "Any"
            },
            {
                "name": "to",
                "comment": "new value",
                "data_type": "Any"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Match",
        "docstring": "Extract values from the specified column into a column or columns based on the specified regular expression.",
        "fields": [
            {
                "name": "on",
                "comment": "string indicating where to split",
                "data_type": "Regex"
            },
            {
                "name": "input",
                "comment": "column to split",
                "data_type": "Symbol"
            },
            {
                "name": "output",
                "comment": "column names to label text surrounding the split",
                "data_type": "Array{Symbol,1}"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Stack",
        "docstring": "Concatenate side-by-side DataFrames into one normal-form DataFrame.",
        "fields": [
            {
                "name": "col",
                "comment": "final column names",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "on",
                "comment": "column name indicator specifying where to stack",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "var",
                "comment": "column name for storing indicator",
                "data_type": "Symbol"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "Deselect",
        "docstring": "",
        "fields": [
            {
                "name": "col",
                "comment": "name of column containing data to remove",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "operation",
                "comment": "how to determine what to drop",
                "data_type": "String"
            }
        ],
        "supertype": "Edit"
    },
    {
        "struct_name": "OrderedGroup",
        "docstring": "maybe, if on and var are the same, we can just fill in groups? i'm thinking SCTG group.",
        "fields": [
            {
                "name": "on",
                "comment": "name of columns containing information specific to a particular level",
                "data_type": "Array{Symbol,1}"
            },
            {
                "name": "var",
                "comment": "name of column containing information of what we will unstack on",
                "data_type": "Symbol"
            },
            {
                "name": "val",
                "comment": "ordered list of values to unstack on. If empty, unstack in order of appearance.",
                "data_type": "Array{Any,1}"
            }
        ],
        "supertype": "Edit"
    }
]