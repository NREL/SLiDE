"""
    build_data(; kwargs...)

# Keywords
- `save = true`:
- `save = true` (default) or `save::String = "path/to/version"`: Save data in each build
step in the path returned by [`SLiDE.build_path`](@ref).
- `save = false`: the files at each step will not be saved.
- `overwrite = false`: If data exists, do not read it. Rebuild the data from scratch.

# Returns
- `d::Dict` of DataFrames containing the model data.
- `set::Dict` of Arrays describing region, sector, final demand, etc.
"""
function build_data(; save = true, overwrite = false)
    # (!!!!) Add option to save final, but not intermediates.
    set = read_set(joinpath("src","readfiles","setlist.yml"))

    disagg = read_build("disagg"; save = save, overwrite = overwrite);
    !isempty(disagg) && (return (disagg, set))
    
    io = read_from(joinpath("src","readfiles","build","partitioninp.yml"))

    io = partition!(io, set; save = save, overwrite = overwrite)
    cal = calibrate(copy(io), set; save = save, overwrite = overwrite)

    shr = Dict(:va0 => cal[:va0])
    shr = share!(shr, set; save = save, overwrite = overwrite)

    disagg = merge(copy(shr),copy(cal),Dict(
        :r => fill_with((r = set[:r],), 1.0),
        (:yr,:r,:g) => fill_with((yr = set[:yr], r = set[:r], g = set[:g]), 1.0)))

    disagg = disagg!(disagg, set; save = save, overwrite = overwrite)
    return (disagg, set)
end

"""
    build_path(build_step::String; kwargs...)

# Arguments
- `build_step::String`: Internally-passed parameter indicating the build step. For the four
    build steps, these are: partition, calibrate, share, and build.

# Keyword Arguments
- `save`: Will this data be saved? If so, where?
    - `save = true` (default): Save data in each build step ([`SLiDE.partition!`](@ref),
        [`SLiDE.calibrate`](@ref), [`SLiDE.share!`](@ref), [`SLiDE.disagg!`](@ref))
        to a directory in `SLiDE/data/default/build/`.
    - `save = path/to/version`: Build data will be saved in `SLiDE/data/path/to/version/build/`.

# Returns
- `path::String`: standardized location indicating where to save intermediate files.
"""
function build_path(build_step::String; save = true)
    path = save == true ? "default" : save
    path = joinpath(SLIDE_DIR, "data", path, "build", build_step)
    return path
end

"""
    read_from(path::String)
"""
function read_from(path::String)
    println("  Reading from $path")
    y = read_file(joinpath(SLIDE_DIR, path));
    d = Dict((length(ensurearray(k)) == 1 ? Symbol(k) : Tuple(Symbol.(k))) => 
        read_file(joinpath(y["Path"]..., ensurearray(v)...)) for (k,v) in y["Input"])
    return d
end

"""
    read_set(path::String)
This function reads sets from the indicated paths.

# Keyword
- `path::String`: Path to location of yaml file describing which sets to store and
    where they are located.

# Returns
- `d::Dict` of arrays containing set information.
"""
function read_set(path::String)
    # (!!!!) path will eventually point to a yaml file generated by user inputs. Or sets will be
    # edited based on user inputs. Idk but this will change when we implement sharing.
    d = read_from(path)
    d = Dict(k => sort(v[:,1]) for (k,v) in d)
    return d
end

"""
    write_build(build_step::String, d::Dict; kwargs...)
This function writes intermediary build files if desired by the user.
"""
function write_build(build_step::String, d::Dict; save = false)
    if save !== false
        save_path = build_path(build_step; save = save)

        !isdir(save_path) && mkpath(save_path)
        println("Saving $build_step in $save_path")
        
        for (k,df) in d
            println("  Saving $k")
            CSV.write(joinpath(save_path, "$k.csv"), df)
        end
    end
end

"""
    read_build(build_step::String; kwargs...)
This function reads intermediary build files if they have previously been saved by the user.

# Returns
- `d::Dict` of DataFrames
"""
function read_build(build_step::String; save = true, overwrite::Bool = false)

    save_path = build_path(build_step; save = save)

    if overwrite == true
        d = Dict()
    else
        if !isdir(save_path)
            @warn("Cannot read data from $save_path, as it does not exist.
                \nCalculating $build_step data.")
            d = Dict()
        else
            println("Reading $build_step data from $save_path")
            files = readdir(save_path)
            d = Dict(Symbol(file[1:end-4]) => read_file(joinpath(save_path,file)) for file in files)
        end
    end
    return d
end