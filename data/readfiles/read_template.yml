path_in:  ""
file_out: ""
description: ""

file_in:
    name:     ""
    nickname: ""
    sheet:    ""
    range:    ""

# OUTPUT COLUMNS -- ORDERED list of output columns and value types.
col_out:
    - source
    - region
    - year
    - emissions
    - units

# RENAME -- Columns 'from' -> 'to'.
renaming:
    from:   ""
    to:     ""

# MELT -- Normalize the dataframe by 'melting' columns into rows.
# This will lengthen the dataframe by duplicating values in the column 'on'
# into new rows. This will define two new columns.
#   (1) 'var' (of 'type') with header names from the original dataframe.
#   (2) 'val' with column values from the original dataframe.
melting:
    on:     ""
    var:    ""
    val:    ""
    type:   ""

# SET -- Define a column 'col' and set all elements to the value 'val'.
setting:
    col:    ""
    val:    ""

# REPLACE -- Values 'from' in the column 'col' with values 'to'.
replacing:
    col:    ""
    from:   ""
    to:     ""

# MAP -- Define an 'output' column containing values based on those in an
# 'input' column. The mapping columns 'from' -> 'to' are contained in a
# .csv 'file' in the core_maps directory. The columns 'input' and 'from'
# should contain the same values, as should 'output' and 'to'.
mapping:
    file:     ""
    from:     ""
    to:       ""
    input:    ""
    output:   ""




















# path_in:  ""
# file_out: ""
# description: ""

# file_in:
#     name:     ""
#     nickname: ""
#     sheet:    ""
#     range:    ""

# # OUTPUT COLUMNS -- ORDERED list of output columns and value types.
# col_out:
#     - source
#     - region
#     - year
#     - emissions
#     - units

# # RENAME -- Columns 'from' -> 'to'.
# renaming:
#     from:   ""
#     to:     ""

# # MELT -- Normalize the dataframe by 'melting' columns into rows.
# # This will lengthen the dataframe by duplicating values in the column 'on'
# # into new rows. This will define two new columns.
# #   (1) 'var' (of 'type') with header names from the original dataframe.
# #   (2) 'val' with column values from the original dataframe.
# melting:
#     on:     ""
#     var:    ""
#     val:    ""
#     type:   ""

# # SET -- Define a column 'col' and set all elements to the value 'val'.
# setting:
#     col:    ""
#     val:    ""

# # REPLACE -- Values 'from' in the column 'col' with values 'to'.
# replacing:
#     col:    ""
#     from:   ""
#     to:     ""

# # MAP -- Define an 'output' column containing values based on those in an
# # 'input' column. The mapping columns 'from' -> 'to' are contained in a
# # .csv 'file' in the core_maps directory. The columns 'input' and 'from'
# # should contain the same values, as should 'output' and 'to'.
# mapping:
#     file:     ""
#     from:     ""
#     to:       ""
#     input:    ""
#     output:   ""