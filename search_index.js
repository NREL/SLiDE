var documenterSearchIndex = {"docs":
[{"location":"api/model.html#Model","page":"Model","title":"Model","text":"","category":"section"},{"location":"api/model.html","page":"Model","title":"Model","text":"Describe model features","category":"page"},{"location":"api/functions/parse.html#Parse","page":"Parse","title":"Parse","text":"","category":"section"},{"location":"api/functions/parse.html#Load","page":"Parse","title":"Load","text":"","category":"section"},{"location":"api/functions/parse.html","page":"Parse","title":"Parse","text":"Modules = [SLiDE]\nPages = [\"parse/load_data.jl\"]\nPrivate = false","category":"page"},{"location":"api/functions/parse.html#Verify","page":"Parse","title":"Verify","text":"","category":"section"},{"location":"api/functions/parse.html","page":"Parse","title":"Parse","text":"Modules = [SLiDE]\nPages = [\"parse/check_data.jl\"]\nPrivate = false","category":"page"},{"location":"api/functions/parse.html#SLiDE.benchmark_against-Tuple{DataFrames.DataFrame,DataFrames.DataFrame}","page":"Parse","title":"SLiDE.benchmark_against","text":"benchmark_against(df_calc, df_bench; kwargs...)\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.compare_keys-Tuple{Array{DataFrames.DataFrame,1},Array{Symbol,1}}","page":"Parse","title":"SLiDE.compare_keys","text":"compare_keys(df_lst::Array{DataFrame,1}, inds::Array{Symbol,1})\n\nArguments\n\ndf_lst::Array{DataFrame,1}: List of DataFrames to compare.   These must all share the same column names.\ninds::Array{Symbol,1}: List of IDs that describe each DataFrame and track which   values/keys are present in each DataFrame. There must be an equal number of input   DataFrames and IDs.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.compare_summary-Tuple{Array{DataFrames.DataFrame,1},Array{Symbol,1}}","page":"Parse","title":"SLiDE.compare_summary","text":"compare_summary(df_lst::Array{DataFrame,1}, inds::Array{Symbol,1}; kwargs...)\n\nArguments\n\ndf::Array{DataFrame,1}: List of DataFrames to compare.   These must all share the same column names.\nd::Array{Dict,1}: Array of dictonaries of DataFrames to compare.\nid::Array{Symbol,1}: List of IDs that describe each DataFrame and track which   values/keys are present in each DataFrame. There must be an equal number of input   DataFrames and IDs.\n\nKeywords\n\ntol::Float64 = 1E-6: Tolerance used when determining whether values are equal.   Default values is 1E-6.\ncomplete_summary::Bool = false: Should we include the full summary DataFrame or only the   problematic rows (i.e., ones where either equal_keys = false or equal_values = false)?\n\nReturns\n\ndf::DataFrame: Summary DataFrame including the index columns and values from the original   df, marked to indicate which input DataFrame they came from, the reldiff between   the values, and booleans equal_key (are values for the index present in both DataFrames?)   and equal_value (are the values the same within the given tol?)\nd::Dict: Dictionary of summary DataFrames\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.compare_values-Tuple{Array{DataFrames.DataFrame,1},Array{Symbol,1}}","page":"Parse","title":"SLiDE.compare_values","text":"compare_values(df_lst::Array{DataFrame,1}, inds::Array{Symbol,1})\n\nArguments\n\ndf_lst::Array{DataFrame,1}: List of DataFrames to compare.   These must all share the same column names.\ninds::Array{Symbol,1}: List of IDs that describe each DataFrame and track which   values/keys are present in each DataFrame. There must be an equal number of input   DataFrames and IDs.\n\nKeyword Argument\n\ntol::Float64 = 1E-6: Tolerance used when determining whether values are equal.   Default values is 1E-6.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.verify_over-Tuple{DataFrames.DataFrame,Any}","page":"Parse","title":"SLiDE.verify_over","text":"verify_over(df::DataFrame, col::Any; tol = 1E-6)\n\n\n\n\n\n","category":"method"},{"location":"man/scaling.html#Scaling","page":"Scaling","title":"Scaling","text":"","category":"section"},{"location":"man/scaling.html#Regional-Scaling","page":"Scaling","title":"Regional Scaling","text":"","category":"section"},{"location":"man/scaling.html","page":"Scaling","title":"Scaling","text":"Source data is regional-specific and available for a variety of regional divisions: state, CBSA, CSA","category":"page"},{"location":"man/scaling.html","page":"Scaling","title":"Scaling","text":"Source Data Region State County CSA CBSA\nBEA Supply/Use N/A N/A N/A N/A N/A\n GSP ✅ ✅ ✅ ❌ ✅\n PCE ✅ ✅ ❌ ❌ ❌\nCensus CFS ❌ ✅ ❌ ✅ ✅\n SGF     \n UTD     \n NASS ❌ ✅ ❌ ❌ ❌\n      \n      ","category":"page"},{"location":"man/scaling.html","page":"Scaling","title":"Scaling","text":"The regional level identifiers used are consistent with those from the 2010 Census Summary File 1. Codes listed in the Census Delineation Files are used to identify regions.","category":"page"},{"location":"man/scaling.html#Sectoral-Scaling","page":"Scaling","title":"Sectoral Scaling","text":"","category":"section"},{"location":"man/scaling.html#BEA","page":"Scaling","title":"BEA","text":"","category":"section"},{"location":"man/scaling.html#NAICS","page":"Scaling","title":"NAICS","text":"","category":"section"},{"location":"man/scaling.html","page":"Scaling","title":"Scaling","text":"The NAICS Codes are structured into the following levels, indicated by the number of digits in the code:","category":"page"},{"location":"man/scaling.html","page":"Scaling","title":"Scaling","text":"Digits Level\n2 Sector\n3 Subsector\n4 Industry Group\n5 NAICS Industry\n6 National Industry","category":"page"},{"location":"man/data/overview.html#Data","page":"Overview","title":"Data","text":"","category":"section"},{"location":"man/data/overview.html#blueNOTE-Data-Set","page":"Overview","title":"blueNOTE Data Set","text":"","category":"section"},{"location":"man/data/overview.html","page":"Overview","title":"Overview","text":"This is the SLiDE version of the blueNOTE dataset developed by the Wisconsin National Data Consortium (WiNDC). The SLiDE datastream is built on the groundwork laid by Thomas F. Rutherford, Andrew Schreiber, Gökçe Akin-Olçum, and Christoph Böhringer.","category":"page"},{"location":"man/data/overview.html","page":"Overview","title":"Overview","text":"The data necessary to execute the SLiDE buildstream is stored in the following structure:","category":"page"},{"location":"man/data/overview.html","page":"Overview","title":"Overview","text":"data/\n├── coremaps/\n└── coremaps/\n└── input/","category":"page"},{"location":"man/data/overview.html#Data-Sources","page":"Overview","title":"Data Sources","text":"","category":"section"},{"location":"man/data/overview.html","page":"Overview","title":"Overview","text":"The blueNOTE dataset is compiled of the following data:","category":"page"},{"location":"man/data/overview.html","page":"Overview","title":"Overview","text":"Bureau of Economic Analysis\nSupply and Use Tables (BEA)\nGross State Product (GSP)\nPersonal Consumer Expenditures (PCE)\nCensus Bureau\nCommodity Flow Survey (CFS)\nState Government Finance (SGF)\nState Exports/Imports (UTD)\nEnergy Information Administration\nState Energy Data System (SEDS)","category":"page"},{"location":"man/eem/seds.html#SEDS","page":"SEDS","title":"SEDS","text":"","category":"section"},{"location":"man/eem/seds.html#Electricity","page":"SEDS","title":"Electricity","text":"","category":"section"},{"location":"man/eem/seds.html","page":"SEDS","title":"SEDS","text":"module_elegen!","category":"page"},{"location":"man/eem/seds.html#SLiDE.module_elegen!","page":"SEDS","title":"SLiDE.module_elegen!","text":"Electricity generation by source.\n\nbarele_yrrsrcsec = leftsedsleft( yrrsrcsec right)\nvert yr  r  (ffre) in src  sec = ele right\n\nFor fossil fuels, use heatrate to convert as follows:\n\nbarele_yrrffin srcsec text billion kWh\n= 10^3 cdot\ndfracbarele_yrrffin srcsec text trillion btu\n      barheatrate_yrsrc text btukWh\n\n\n\n\n\n","category":"function"},{"location":"man/eem/seds.html#Energy","page":"SEDS","title":"Energy","text":"","category":"section"},{"location":"man/eem/seds.html","page":"SEDS","title":"SEDS","text":"module_energy!\nSLiDE._module_energy_supply\nSLiDE._module_energy_ref\nSLiDE._module_energy_ind\nSLiDE._module_energy_price","category":"page"},{"location":"man/eem/seds.html#SLiDE.module_energy!","page":"SEDS","title":"SLiDE.module_energy!","text":"barenergy_yrrsrcsec = leftsedsleft( yrrsrcsec right)\nvert yr  r  e in src  ed in sec right\n\nSLiDE._module_energy_supply adds supply information from the electricity generation dataset output by SLiDE.module_elegen!. The following functions are used to calculate values or make adjustments to values in the energy dataset. These operations must occur in the following order:\n\nSLiDE._module_energy_ref\nSLiDE._module_energy_ind\nSLiDE._module_energy_price\n\n\n\n\n\n","category":"function"},{"location":"man/eem/seds.html#SLiDE._module_energy_supply","page":"SEDS","title":"SLiDE._module_energy_supply","text":"barsupply_yrrsrc=ele = sum_src barele_yrrsrc\n\n\n\n\n\n","category":"function"},{"location":"man/eem/seds.html#SLiDE._module_energy_ref","page":"SEDS","title":"SLiDE._module_energy_ref","text":"barref_yrrsrc=ele text billion kWh\n=\nbarref_yrrsrc=ele text trillion btu\ncdot\ndfracbarind_yrrsrc=ele text billion kWh\n      barind_yrrsrc=ele text trillion btu\n\n\n\n\n\n","category":"function"},{"location":"man/eem/seds.html#SLiDE._module_energy_ind","page":"SEDS","title":"SLiDE._module_energy_ind","text":"barind_yrrsrc=(ffele)\n= barind_yrrsrc=(ffele)\n- barref_yrrsrc=(ffele)\n\n\n\n\n\n","category":"function"},{"location":"man/eem/seds.html#SLiDE._module_energy_price","page":"SEDS","title":"SLiDE._module_energy_price","text":"beginaligned\nbarff_yrrsec=ele text USDmillion btu\n= 10^3 cdot\ndfracbarff_yrrsec=ele text billion USD\n      barff_yrrsec=ele text trillion btu\n\nbarele_yrrsec text USDthousand kWh\n= 10^3 cdot\ndfracbarele_yrrsec text billion USD\n      barele_yrrsec text thousand kWh\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/eem/seds.html#Emissions","page":"SEDS","title":"Emissions","text":"","category":"section"},{"location":"man/eem/seds.html","page":"SEDS","title":"SEDS","text":"module_co2emis!","category":"page"},{"location":"man/eem/seds.html#SLiDE.module_co2emis!","page":"SEDS","title":"SLiDE.module_co2emis!","text":"Carbon dioxide emissions in million metric tons of carbon dioxide. Use SEDS data to calculate emissions by sectoral use where possible:\n\nbarbtu_yrrsrcsec = leftbarenergyleft( yrrsrcsec right)\nvert yr  r  e in src  sec right\n\nbarco_2_yrrsrcsec text million metric tons of CO2\n= 10^-3 cdot\ndfracbarbtu_yrrsrcsec text trillion btu\n      co_2btu_src text kg CO2million btu\n\nUse EPA emissions data for total emissions by source.\n\n\n\n\n\n","category":"function"},{"location":"lib/buildstream.html#Build-Stream","page":"Build Stream","title":"Build Stream","text":"","category":"section"},{"location":"lib/buildstream.html","page":"Build Stream","title":"Build Stream","text":"Overview of how BuildStream works to build the national model. There are four steps required to build the cleaned input data for use in the model.","category":"page"},{"location":"lib/buildstream.html","page":"Build Stream","title":"Build Stream","text":"Partition. Divide BEA supply/use data into parameters.\nCalibrate.\nShare. Divide data into regional component. This will guide how to break the national data into regional components by state or county.\nDisaggregate.","category":"page"},{"location":"man/build/partition.html#Partition","page":"Partition","title":"Partition","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"The first step in the build stream involves partitioning BEA supply and use data, by filtering this data based on sectors and goods. Generally, BEA input (i) maps to goods (g), and BEA output (j) maps to sectors (s).","category":"page"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_io!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_io!","page":"Partition","title":"SLiDE._partition_io!","text":"ys0(yr,s,g), sectoral supply (with byproducts), and id0(yr,g,s), intermediate input demand\n\nFilter from supply/use data:\n\nbeginaligned\ntildeid_yrs = leftuseleft(yrijright)\nvert yr g in i s in j right\n\ntildeys_yrsg = leftsupplyleft(yrjiright)\nvert yr s in j g in i right\nendaligned\n\nTreat negative inputs as outputs:\n\nbeginaligned\ntildeys_yrsg = tildeys_yrsg - minleft0 tildeid_yrgs right \ntildeid_yrgs = maxleft 0 tildeid_yrsg right\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#Use","page":"Partition","title":"Use","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_ts0!\nSLiDE._partition_va0!\nSLiDE._partition_x0!\nSLiDE._partition_fd!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_ts0!","page":"Partition","title":"SLiDE._partition_ts0!","text":"ts(yr,ts,s), taxes and subsidies\n\ntildets_yrtss = leftuseleft(yrijright)\nvert yr ts in i s in j right\n\nTreat negative inputs as outputs:\n\ntildets_yrtss = - tildets_yrtss\nforall ts = subsidies\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_va0!","page":"Partition","title":"SLiDE._partition_va0!","text":"va(yr,va,s), value added\n\ntildeva_yrvas = leftuseleft(yrijright)\nvert yr va in i s in j right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_x0!","page":"Partition","title":"SLiDE._partition_x0!","text":"x(yr,g), exports of goods and services\n\ntildex_yrg = leftuseleft(yrijright)\nvert yr g in i exports in j right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_fd!","page":"Partition","title":"SLiDE._partition_fd!","text":"fd(yr,g,fd), final demand, and fs(yr,g), household supply\n\nbeginaligned\ntildefd_yrgfd = leftuseleft(yrijright) vert yr g in i fd in j right\n\ntildefs_yrg = lefttildefd_yrgfd vert yr g in i fd = pce right\nendaligned\n\nbeginaligned\ntildefs_yrg = - minleft0 tildefs_yrg right\n\ntildefd_yrgfd = maxleft0 tildefd_yrgfd right vert yr g fd = pce right\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#Calculate-aggregates","page":"Partition","title":"Calculate aggregates","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_s0!\nSLiDE._partition_a0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_s0!","page":"Partition","title":"SLiDE._partition_s0!","text":"s(yr,s), aggregate supply\n\ntildes_yrs = sum_gtildeys_yrsg\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_a0!","page":"Partition","title":"SLiDE._partition_a0!","text":"a(yr,g), Armington supply\n\ntildea_yrg = sum_fdtildefd_yrgfd + sum_stildeid_yrgs\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#Supply","page":"Partition","title":"Supply","text":"","category":"section"},{"location":"man/build/partition.html#Make-insurance-adjustments.","page":"Partition","title":"Make insurance adjustments.","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_cif0!\nSLiDE._partition_m0!\nSLiDE._partition_trn0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_cif0!","page":"Partition","title":"SLiDE._partition_cif0!","text":"cif(yr,g), CIF/FOB Adjustments on Imports\n\ntildecif_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = ciffob right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_m0!","page":"Partition","title":"SLiDE._partition_m0!","text":"m(yr,g), imports\n\ntildem_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = imports right\n\nAdjust transport margins according to CIF/FOB adjustments:\n\ntildem_yrg = tildem_yrg + tildecif_yrg\nforall g = ins\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_trn0!","page":"Partition","title":"SLiDE._partition_trn0!","text":"trn(yr,g), transportation costs\n\ntildetrn_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = trncost right\n\ntildetrn_yrg = tildem_yrg + tildecif_yrg\nforall g neq ins\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#Calculate-margin-supply-and-demand.","page":"Partition","title":"Calculate margin supply and demand.","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_mrg0!\nSLiDE._partition_md0!\nSLiDE._partition_ms0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_mrg0!","page":"Partition","title":"SLiDE._partition_mrg0!","text":"mrg(yr,g), trade margins\n\ntildemrg_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = margins right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_md0!","page":"Partition","title":"SLiDE._partition_md0!","text":"md(yr,m,g), margin demand\n\nbeginaligned\ntildemd_yrmg = \nbegincases\ntildemrg_yrg   m = trd   \ntildetrn_yrg   m = trn\nendcases\n\ntildemd_yrmg = maxleft0 tildemd_yrmg right\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_ms0!","page":"Partition","title":"SLiDE._partition_ms0!","text":"ms(yr,g,m), margin supply\n\nbeginaligned\ntildems_yrgm = \nbegincases\ntildemrg_yrg   m = trd   \ntildetrn_yrg   m = trn\nendcases\n\ntildems_yrgm = maxleft0 -tildems_yrgm right\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_y0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_y0!","page":"Partition","title":"SLiDE._partition_y0!","text":"y(yr,g), gross output \"Move household supply of recycled goods into the domestic output market from which some may be exported. Net out margin supply from output.\"\n\ntildey_yrg = sum_stildeys_yrsg + tildefd_yrg - sum_mtildems_yrgm\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#Calculate-import-tariffs.","page":"Partition","title":"Calculate import tariffs.","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_tax0!\nSLiDE._partition_sbd0!\nSLiDE._partition_ta0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_tax0!","page":"Partition","title":"SLiDE._partition_tax0!","text":"tax(yr,g), taxes on products\n\ntildetax_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = tax right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_sbd0!","page":"Partition","title":"SLiDE._partition_sbd0!","text":"sbd(yr,g), subsidies on products\n\ntildesbd_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = subsidies right\n\nTreat negative inputs as outputs:\n\ntildesbd_yrg = - tildesbd_yrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_ta0!","page":"Partition","title":"SLiDE._partition_ta0!","text":"ta(yr,g), import tariff\n\ntildeta_yrg = fractildetax_yrg - tildesbd_yrgtildea_yrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#Calculate-tax-rate-on-intermediate-demand.","page":"Partition","title":"Calculate tax rate on intermediate demand.","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_duty0!\nSLiDE._partition_tm0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_duty0!","page":"Partition","title":"SLiDE._partition_duty0!","text":"duty(yr,g), import duties\n\ntildeduty_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = duties right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_tm0!","page":"Partition","title":"SLiDE._partition_tm0!","text":"tm(yr,g), tax net subsidy rate on intermediate demand\n\ntildetm_yrg = fractildeduty_yrgtildem_yrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_bop!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_bop!","page":"Partition","title":"SLiDE._partition_bop!","text":"bopdef(yr), balance of payments\n\ntildebop_yr = 0\nforall yr\n\n\n\n\n\n","category":"function"},{"location":"man/build/overview.html#Build","page":"Overview","title":"Build","text":"","category":"section"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"There are four steps required to build the cleaned input data for use in the model:","category":"page"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"Partition\nCalibrate\nShare\nDisaggregate","category":"page"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"The buildstream process and all of the notation included in the SLiDE documentation here is meant to replicate the WiNDC buildstream. For more information, please reference:","category":"page"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"Thomas F. Rutherford and Andrew Schreiber, \"Tools for Open Source, Subnational CGE   Modeling with an Illustrative Analysis of Carbon Leakage,\"   J Global Econ Anal 4(2): 1-66.","category":"page"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"build","category":"page"},{"location":"man/build/overview.html#SLiDE.build","page":"Overview","title":"SLiDE.build","text":"build(; kwargs...)\n\nThis function will execute the SLiDE buildstream and generate the parameters necessary to run the model. If the dataset has already been generated and saved, the function will read and return those values.\n\nOtherwise, it will read BEA supply/use data from the /SLIDE_DIR/data/input/ directory.\n\nThen, execute the four steps of the SLiDE buildstream by executing the following functions:\n\nSLiDE.partition\nSLiDE.calibrate\nSLiDE.share\nSLiDE.disagg\n\nThis information will be saved in the following structure:\n\n/SLIDE_DATA/data/dataset/\n├── parameters/\n└── sets/\n\nArguments\n\ndataset::String: Dataset identifier\n\nKeywords\n\nsave_build::Bool = false: That decides whether to save the information at each build   step. Setting save_build = true will add the directory /SLIDE_DATA/data/dataset/build   to contain a subdirectory for each of the four build steps.\noverwrite::Bool = false: If data exists, do not read it. Build the data from scratch.\n\nReturns\n\nd::Dict{Symbol,DataFrame} of model parameters\nset::Dict{Any,Array} of Arrays describing parameter indices (years, regions, goods, sectors, etc.)\n\n\n\n\n\n","category":"function"},{"location":"man/build/overview.html#Partition","page":"Overview","title":"Partition","text":"","category":"section"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"Divide BEA supply/use data into parameters.","category":"page"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"partition","category":"page"},{"location":"man/build/overview.html#SLiDE.partition","page":"Overview","title":"SLiDE.partition","text":"partition(d::Dict, set::Dict; kwargs...)\n\nArguments\n\nd::Dict of DataFrames containing the model data.\nset::Dict of Arrays describing region, sector, final demand, etc.\n\nKeywords\n\nsave_build = true\noverwrite = false\n\nSee SLiDE.build for keyword argument descriptions.\n\nReturns\n\nd::Dict of DataFrames containing the model data at the\n\n\n\n\n\n","category":"function"},{"location":"man/build/overview.html#Calibrate","page":"Overview","title":"Calibrate","text":"","category":"section"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"calibrate","category":"page"},{"location":"man/build/overview.html#SLiDE.calibrate","page":"Overview","title":"SLiDE.calibrate","text":"calibrate(d::Dict, set::Dict; save_build=true, overwrite=false)\ncalibrate(year::Int, d::Dict, set::Dict)\n\nArguments\n\nd::Dict of DataFrames containing the model data.\nset::Dict of Arrays describing region, sector, final demand, etc.\nyear::Int: year for which to perform calibration\n\nKeywords\n\nsave_build = true\noverwrite = false\n\nSee SLiDE.build for keyword argument descriptions.\n\nReturns\n\nd::Dict of DataFrames containing the model data at the calibration step.\n\n\n\n\n\n","category":"function"},{"location":"man/build/overview.html#Share","page":"Overview","title":"Share","text":"","category":"section"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"Divide data into regional component. This will guide how to break the national data into regional components by state or county.","category":"page"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"share","category":"page"},{"location":"man/build/overview.html#SLiDE.share","page":"Overview","title":"SLiDE.share","text":"share!(d::Dict, set::Dict; save_build = true, overwrite = false)\n\nArguments\n\nd::Dict of DataFrames containing the model data.\nset::Dict of Arrays describing region, sector, final demand, etc.\n\nKeywords\n\nsave_build = true\noverwrite = false\n\nSee SLiDE.build for keyword argument descriptions.\n\nReturns\n\nd::Dict of DataFrames containing the model data at the sharing step.\n\n\n\n\n\n","category":"function"},{"location":"man/build/overview.html#Disaggregate","page":"Overview","title":"Disaggregate","text":"","category":"section"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"disagg","category":"page"},{"location":"man/build/overview.html#SLiDE.disagg","page":"Overview","title":"SLiDE.disagg","text":"function disagg!(d::Dict, set::Dict; save_build = true, overwrite = false)\n\nArguments\n\nd::Dict of DataFrames containing the model data.\nset::Dict of Arrays describing region, sector, final demand, etc.\n\nKeywords\n\nsave_build = true\noverwrite = false\n\nSee SLiDE.build for keyword argument descriptions.\n\nReturns\n\nd::Dict of DataFrames containing the model data at the disaggregation step\n\n\n\n\n\n","category":"function"},{"location":"api/types/parse.html#Parsing","page":"Parsing","title":"Parsing","text":"","category":"section"},{"location":"api/types/parse.html#Edit","page":"Parsing","title":"Edit","text":"","category":"section"},{"location":"api/types/parse.html","page":"Parsing","title":"Parsing","text":"Modules = [SLiDE]\nPrivate = false\nFilter = t -> t <: SLiDE.Edit\nOrder = [:type]","category":"page"},{"location":"api/types/parse.html#SLiDE.Add","page":"Parsing","title":"SLiDE.Add","text":"mutable struct Add <: Edit\n    col::Symbol\n    val::Any\nend\n\nAdd new column col filled with val\n\nArguments\n\ncol::Symbol: name of new column\nval::Any: value to add to new column\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Combine","page":"Parsing","title":"SLiDE.Combine","text":"mutable struct Combine <: Edit\n    operation::String\n    output::Array{Symbol,1}\nend\n\nArguments\n\noperation::String: operation to perform (+, -, *, /)\noutput::Array{Symbol,1}\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Describe","page":"Parsing","title":"SLiDE.Describe","text":"mutable struct Describe <: Edit\n    col::Symbol\nend\n\nThis DataType is required when multiple DataFrames will be appended into one output file (say, if multiple sheets from an XLSX file are included). Before the DataFrames are appended, a column col will be added and filled with the value in the file descriptor. !!!! Does it make sense to have a DataType with one field?\n\nArguments\n\ncol::Symbol: name of new column\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Deselect","page":"Parsing","title":"SLiDE.Deselect","text":"mutable struct Deselect <: Edit\n    col::Array{Symbol,1}\n    operation::String\nend\n\nArguments\n\ncol::Array{Symbol,1}: name of column containing data to remove\noperation::String: how to determine what to drop\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Drop","page":"Parsing","title":"SLiDE.Drop","text":"mutable struct Drop <: Edit\n    col::Symbol\n    val::Any\n    operation::String\nend\n\nRemove information from the dataframe - either an entire column or rows containing specified values.\n\nArguments\n\ncol::Symbol: name of column containing data to remove\nval::Any: value to drop\noperation::String: how to determine what to drop\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Group","page":"Parsing","title":"SLiDE.Group","text":"mutable struct Group <: Edit\n    file::String\n    from::Symbol\n    to::Array{Symbol,1}\n    input::Symbol\n    output::Array{Symbol,1}\nend\n\nUse to edit files containing data in successive dataframes with an identifying header cell or row.\n\nArguments\n\nfile::String: mapping .csv file name in the coremaps directory. The mapping file should correlate with the header information identifying each data group. It will be used to separate the header rows from data.\nfrom::Symbol: name of the mapping column containing input values\nto::Array{Symbol,1}: name of the mapping column containing output values\ninput::Symbol: name of the input column containing\noutput::Array{Symbol,1}: name of the output column created\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Map","page":"Parsing","title":"SLiDE.Map","text":"mutable struct Map <: Edit\n    file::Any\n    from::Array{Symbol,1}\n    to::Array{Symbol,1}\n    input::Array{Symbol,1}\n    output::Array{Symbol,1}\n    kind::Symbol\nend\n\nDefine an output column containing values based on those in an input column. The mapping columns from -> to are contained in a .csv file in the coremaps directory. The columns input and from should contain the same values, as should output and to.\n\nArguments\n\nfile::Any: mapping .csv file name in the coremaps directory\nfrom::Array{Symbol,1}: name of the mapping column containing input values\nto::Array{Symbol,1}: name of the mapping column containing output values\ninput::Array{Symbol,1}: name of the input column to map\noutput::Array{Symbol,1}: name of the output column created\nkind::Symbol: type of join to perform.\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Match","page":"Parsing","title":"SLiDE.Match","text":"mutable struct Match <: Edit\n    on::Regex\n    input::Symbol\n    output::Array{Symbol,1}\nend\n\nExtract values from the specified column into a column or columns based on the specified regular expression.\n\nArguments\n\non::Regex: string indicating where to split\ninput::Symbol: column to split\noutput::Array{Symbol,1}: column names to label text surrounding the split\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Melt","page":"Parsing","title":"SLiDE.Melt","text":"mutable struct Melt <: Edit\n    on::Array{Symbol,1}\n    var::Symbol\n    val::Symbol\nend\n\nNormalize the dataframe by 'melting' columns into rows, lengthening the dataframe by duplicating values in the column on into new rows and defining 2 new columns: 1. var with header names from the original dataframe. 2. val with column values from the original dataframe. This operation can only be performed once per dataframe.\n\nArguments\n\non::Array{Symbol,1}: name of column(s) NOT included in melt\nvar::Symbol: name of column containing header NAMES from the original dataframe\nval::Symbol: name of column containing VALUES from the original dataframe\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Operate","page":"Parsing","title":"SLiDE.Operate","text":"mutable struct Operate <: Edit\n    operation::String\n    from::Array{Symbol,1}\n    to::Array{Symbol,1}\n    input::Array{Symbol,1}\n    output::Symbol\nend\n\nPerform an arithmetic operation across multiple DataFrame columns.\n\nArguments\n\noperation::String: operation to perform (+, -, *, /)\nfrom::Array{Symbol,1}: name of original comment column (ex. units)\nto::Array{Symbol,1}: name of new comment column (ex. units)\ninput::Array{Symbol,1}: names of columns on which to operate\noutput::Symbol: name of result column\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Order","page":"Parsing","title":"SLiDE.Order","text":"mutable struct Order <: Edit\n    col::Array{Symbol,1}\n    type::Array{DataType,1}\nend\n\nRearranges columns in the order specified by cols and sets them to the specified type.\n\nArguments\n\ncol::Array{Symbol,1}: Ordered list of DataFrame columns\ntype::Array{DataType,1}: Ordered column types.\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.OrderedGroup","page":"Parsing","title":"SLiDE.OrderedGroup","text":"mutable struct OrderedGroup <: Edit\n    on::Array{Symbol,1}\n    var::Symbol\n    val::Array{Any,1}\nend\n\nmaybe, if on and var are the same, we can just fill in groups? i'm thinking SCTG group.\n\nArguments\n\non::Array{Symbol,1}: name of columns containing information specific to a particular level\nvar::Symbol: name of column containing information of what we will unstack on\nval::Array{Any,1}: ordered list of values to unstack on. If empty, unstack in order of appearance.\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Rename","page":"Parsing","title":"SLiDE.Rename","text":"mutable struct Rename <: Edit\n    from::Symbol\n    to::Symbol\nend\n\nChange column name from -> to.\n\nArguments\n\nfrom::Symbol: original column name\nto::Symbol: new column name\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Replace","page":"Parsing","title":"SLiDE.Replace","text":"mutable struct Replace <: Edit\n    col::Symbol\n    from::Any\n    to::Any\nend\n\nReplace values in col from -> to.\n\nArguments\n\ncol::Symbol: name of column containing values to be replaced\nfrom::Any: value to replace\nto::Any: new value\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Stack","page":"Parsing","title":"SLiDE.Stack","text":"mutable struct Stack <: Edit\n    col::Array{Symbol,1}\n    on::Array{Symbol,1}\n    var::Symbol\nend\n\nConcatenate side-by-side DataFrames into one normal-form DataFrame.\n\nArguments\n\ncol::Array{Symbol,1}: final column names\non::Array{Symbol,1}: column name indicator specifying where to stack\nvar::Symbol: column name for storing indicator\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#File","page":"Parsing","title":"File","text":"","category":"section"},{"location":"api/types/parse.html","page":"Parsing","title":"Parsing","text":"Modules = [SLiDE]\nPrivate = false\nFilter = t -> t <: SLiDE.File\nOrder = [:type]","category":"page"},{"location":"api/types/parse.html#SLiDE.CSVInput","page":"Parsing","title":"SLiDE.CSVInput","text":"mutable struct CSVInput <: File\n    name::String\n    descriptor::String\nend\n\nRead .csv file\n\nArguments\n\nname::String: input file name\ndescriptor::String: file descriptor\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.DataInput","page":"Parsing","title":"SLiDE.DataInput","text":"mutable struct DataInput <: File\n    name::String\n    descriptor::String\n    col::Array{Symbol,1}\nend\n\nRead .csv file with specific column names\n\nArguments\n\nname::String: input file name\ndescriptor::String: file descriptor\ncol::Array{Symbol,1}: data column names\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.GAMSInput","page":"Parsing","title":"SLiDE.GAMSInput","text":"mutable struct GAMSInput <: File\n    name::String\n    col::Array{Symbol,1}\nend\n\nRead .map or .set file\n\nArguments\n\nname::String: input file name\ncol::Array{Symbol,1}: column names\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.SetInput","page":"Parsing","title":"SLiDE.SetInput","text":"mutable struct SetInput <: File\n    name::String\n    descriptor::Symbol\nend\n\nRead .csv file with specific column names\n\nArguments\n\nname::String: input file name\ndescriptor::Symbol: file descriptor\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.XLSXInput","page":"Parsing","title":"SLiDE.XLSXInput","text":"mutable struct XLSXInput <: File\n    name::String\n    sheet::String\n    range::String\n    descriptor::String\nend\n\nRead .xlsx file.\n\nArguments\n\nname::String: input file name\nsheet::String: input sheet name\nrange::String: input sheet range\ndescriptor::String: file descriptor\n\n\n\n\n\n","category":"type"},{"location":"api/functions/filter.html#Filter-and-Resize","page":"Filter and Resize","title":"Filter and Resize","text":"","category":"section"},{"location":"api/functions/filter.html#Filter","page":"Filter and Resize","title":"Filter","text":"","category":"section"},{"location":"api/functions/filter.html","page":"Filter and Resize","title":"Filter and Resize","text":"filter_with\nextrapolate_year\nextrapolate_region","category":"page"},{"location":"api/functions/filter.html#SLiDE.filter_with","page":"Filter and Resize","title":"SLiDE.filter_with","text":"filter_with(df::DataFrame, set::Any; kwargs...)\n\nArguments\n\ndf::DataFrame to filter.\nset::Dict or set::NamedTuple: Values to keep in the DataFrame.\n\nKeywords\n\nextrapolate::Bool = false: Add missing regions/years to the DataFrame?   If extrapolate is set to true, the following kwargs become relevant:\nWhen extrapolating over years,\nbackward::Bool = true: Do we extrapolate backward in time?\nforward::Bool = true: Do we extrapolate forward in time?\nCurrently, \"extrapolating\" means copying the closest \nWhen extrapolating across regions,\nr::Pair = \"md\" => \"dc: Pair indicating a region (r.first) to extrapolate to   another region (r.second). A suggested regional extrapolation: MD data will be   used to approximate DC data in the event that it is missing.\noverwrite::Bool = false: If data in the target region r.second is already present,   should it be overwritten?\n\nReturns\n\ndf::DataFrame with only the desired keys.\n\nExamples\n\njulia> df = read_file(joinpath(SLIDE_DIR,\"docs\",\"src\",\"assets\",\"data\",\"filter_use.csv\"))\n14×4 DataFrame\n│ Row │ yr    │ i      │ j      │ value   │\n│     │ Int64 │ String │ String │ Float64 │\n├─────┼───────┼────────┼────────┼─────────┤\n│ 1   │ 2015  │ agr    │ agr    │ 69.42   │\n│ 2   │ 2015  │ agr    │ fbp    │ 277.179 │\n│ 3   │ 2015  │ fbp    │ agr    │ 49.132  │\n│ 4   │ 2015  │ fbp    │ fbp    │ 210.998 │\n│ 5   │ 2015  │ uti    │ agr    │ 4.846   │\n│ 6   │ 2015  │ uti    │ fbp    │ 10.102  │\n│ 7   │ 2015  │ uti    │ uti    │ 35.093  │\n│ 8   │ 2016  │ agr    │ agr    │ 60.197  │\n│ 9   │ 2016  │ agr    │ fbp    │ 264.173 │\n│ 10  │ 2016  │ fbp    │ agr    │ 47.739  │\n│ 11  │ 2016  │ fbp    │ fbp    │ 205.21  │\n│ 12  │ 2016  │ uti    │ agr    │ 4.548   │\n│ 13  │ 2016  │ uti    │ fbp    │ 9.152   │\n│ 14  │ 2016  │ uti    │ uti    │ 27.47   │\n\njulia> df = filter_with(df, (i = [\"agr\",\"fbp\"], j = [\"agr\",\"fbp\"]))\n8×4 DataFrame\n│ Row │ yr    │ i      │ j      │ value   │\n│     │ Int64 │ String │ String │ Float64 │\n├─────┼───────┼────────┼────────┼─────────┤\n│ 1   │ 2015  │ agr    │ agr    │ 69.42   │\n│ 2   │ 2015  │ agr    │ fbp    │ 277.179 │\n│ 3   │ 2015  │ fbp    │ agr    │ 49.132  │\n│ 4   │ 2015  │ fbp    │ fbp    │ 210.998 │\n│ 5   │ 2016  │ agr    │ agr    │ 60.197  │\n│ 6   │ 2016  │ agr    │ fbp    │ 264.173 │\n│ 7   │ 2016  │ fbp    │ agr    │ 47.739  │\n│ 8   │ 2016  │ fbp    │ fbp    │ 205.21  │\n\njulia> filter_with(df, (yr = 2016,); drop = true)\n4×3 DataFrame\n│ Row │ i      │ j      │ value   │\n│     │ String │ String │ Float64 │\n├─────┼────────┼────────┼─────────┤\n│ 1   │ agr    │ agr    │ 60.197  │\n│ 2   │ agr    │ fbp    │ 264.173 │\n│ 3   │ fbp    │ agr    │ 47.739  │\n│ 4   │ fbp    │ fbp    │ 205.21  │\n\n\n\n\n\n","category":"function"},{"location":"api/functions/filter.html#SLiDE.extrapolate_year","page":"Filter and Resize","title":"SLiDE.extrapolate_year","text":"extrapolate_year(df::DataFrame, yr::Array{Int64,1}; kwargs...)\nextrapolate_year(df::DataFrame, set::Any; kwargs...)\n\nArguments\n\ndf::DataFrame that might be in need of extrapolation.\nyr::Array{Int64,1}: List of years overwhich extrapolation is possible (depending on the kwargs)\nset::Dict or set::NamedTuple containing list of years, identified by the key :yr.\n\nKeywords\n\nbackward::Bool = true: Do we extrapolate backward in time?\nforward::Bool = true: Do we extrapolate forward in time?\n\nReturns\n\ndf::DataFrame extrapolated in time.\n\nExample\n\nContinuing with the DataFrame from SLiDE.filter_with,\n\njulia> df\n8×4 DataFrame\n│ Row │ yr    │ i      │ j      │ value   │\n│     │ Int64 │ String │ String │ Float64 │\n├─────┼───────┼────────┼────────┼─────────┤\n│ 1   │ 2015  │ agr    │ agr    │ 69.42   │\n│ 2   │ 2015  │ agr    │ fbp    │ 277.179 │\n│ 3   │ 2015  │ fbp    │ agr    │ 49.132  │\n│ 4   │ 2015  │ fbp    │ fbp    │ 210.998 │\n│ 5   │ 2016  │ agr    │ agr    │ 60.197  │\n│ 6   │ 2016  │ agr    │ fbp    │ 264.173 │\n│ 7   │ 2016  │ fbp    │ agr    │ 47.739  │\n│ 8   │ 2016  │ fbp    │ fbp    │ 205.21  │\n\njulia> extrapolate_year(df, Dict(:yr => 2014:2017))\n16×4 DataFrame\n│ Row │ yr    │ i      │ j      │ value   │\n│     │ Int64 │ String │ String │ Float64 │\n├─────┼───────┼────────┼────────┼─────────┤\n│ 1   │ 2014  │ agr    │ agr    │ 69.42   │\n│ 2   │ 2014  │ agr    │ fbp    │ 277.179 │\n│ 3   │ 2014  │ fbp    │ agr    │ 49.132  │\n│ 4   │ 2014  │ fbp    │ fbp    │ 210.998 │\n│ 5   │ 2015  │ agr    │ agr    │ 69.42   │\n│ 6   │ 2015  │ agr    │ fbp    │ 277.179 │\n│ 7   │ 2015  │ fbp    │ agr    │ 49.132  │\n│ 8   │ 2015  │ fbp    │ fbp    │ 210.998 │\n│ 9   │ 2016  │ agr    │ agr    │ 60.197  │\n│ 10  │ 2016  │ agr    │ fbp    │ 264.173 │\n│ 11  │ 2016  │ fbp    │ agr    │ 47.739  │\n│ 12  │ 2016  │ fbp    │ fbp    │ 205.21  │\n│ 13  │ 2017  │ agr    │ agr    │ 60.197  │\n│ 14  │ 2017  │ agr    │ fbp    │ 264.173 │\n│ 15  │ 2017  │ fbp    │ agr    │ 47.739  │\n│ 16  │ 2017  │ fbp    │ fbp    │ 205.21  │\n\n\n\n\n\n","category":"function"},{"location":"api/functions/filter.html#SLiDE.extrapolate_region","page":"Filter and Resize","title":"SLiDE.extrapolate_region","text":"extrapolate_region(df::DataFrame; kwargs...)\nextrapolate_region(df::DataFrame, r::Pair; kwargs...)\n\nFills in missing data in the input DataFrame df by filling it with existing information in df. Here, \"extrapolate\" makes a direct copy of the data.\n\nArguments\n\ndf::DataFrame that might be in need of extrapolation.\nr::Pair = \"md\" => \"dc: Pair indicating a region (r.first) to extrapolate to another   region (r.second). A suggested regional extrapolation: MD data will be used to   approximate DC data in the event that it is missing. To fill multiple regions with data,   use \"md\" => [\"dc\",\"va\"].\n\nKeyword Argument:\n\noverwrite::Bool = false: If data in the target region r.second is already present,   should it be overwritten?\n\nReturns\n\ndf::DataFrame extrapolated in region.\n\nExample\n\njulia> df = read_file(joinpath(SLIDE_DIR,\"docs\",\"src\",\"assets\",\"data\",\"filter_utd.csv\"))\n8×5 DataFrame\n│ Row │ yr    │ r      │ s      │ t       │ value     │\n│     │ Int64 │ String │ String │ String  │ Float64   │\n├─────┼───────┼────────┼────────┼─────────┼───────────┤\n│ 1   │ 2015  │ md     │ agr    │ exports │ 0.0390152 │\n│ 2   │ 2015  │ md     │ agr    │ imports │ 0.778159  │\n│ 3   │ 2015  │ va     │ agr    │ exports │ 1.11601   │\n│ 4   │ 2015  │ va     │ agr    │ imports │ 0.88253   │\n│ 5   │ 2016  │ md     │ agr    │ exports │ 0.0330508 │\n│ 6   │ 2016  │ md     │ agr    │ imports │ 0.762089  │\n│ 7   │ 2016  │ va     │ agr    │ exports │ 1.16253   │\n│ 8   │ 2016  │ va     │ agr    │ imports │ 0.86741   │\n\njulia> extrapolate_region(df)\n12×5 DataFrame\n│ Row │ r      │ yr    │ s      │ t       │ value     │\n│     │ String │ Int64 │ String │ String  │ Float64   │\n├─────┼────────┼───────┼────────┼─────────┼───────────┤\n│ 1   │ dc     │ 2015  │ agr    │ exports │ 0.0390152 │\n│ 2   │ dc     │ 2015  │ agr    │ imports │ 0.778159  │\n│ 3   │ dc     │ 2016  │ agr    │ exports │ 0.0330508 │\n│ 4   │ dc     │ 2016  │ agr    │ imports │ 0.762089  │\n│ 5   │ md     │ 2015  │ agr    │ exports │ 0.0390152 │\n│ 6   │ md     │ 2015  │ agr    │ imports │ 0.778159  │\n│ 7   │ md     │ 2016  │ agr    │ exports │ 0.0330508 │\n│ 8   │ md     │ 2016  │ agr    │ imports │ 0.762089  │\n│ 9   │ va     │ 2015  │ agr    │ exports │ 1.11601   │\n│ 10  │ va     │ 2015  │ agr    │ imports │ 0.88253   │\n│ 11  │ va     │ 2016  │ agr    │ exports │ 1.16253   │\n│ 12  │ va     │ 2016  │ agr    │ imports │ 0.86741   │\n\nIf we instead want to copy VA data into DC, specify:\n\njulia> extrapolate_region(df, \"va\" => \"dc\")\n12×5 DataFrame\n│ Row │ r      │ yr    │ s      │ t       │ value     │\n│     │ String │ Int64 │ String │ String  │ Float64   │\n├─────┼────────┼───────┼────────┼─────────┼───────────┤\n│ 1   │ dc     │ 2015  │ agr    │ exports │ 1.11601   │\n│ 2   │ dc     │ 2015  │ agr    │ imports │ 0.88253   │\n│ 3   │ dc     │ 2016  │ agr    │ exports │ 1.16253   │\n│ 4   │ dc     │ 2016  │ agr    │ imports │ 0.86741   │\n│ 5   │ md     │ 2015  │ agr    │ exports │ 0.0390152 │\n│ 6   │ md     │ 2015  │ agr    │ imports │ 0.778159  │\n│ 7   │ md     │ 2016  │ agr    │ exports │ 0.0330508 │\n│ 8   │ md     │ 2016  │ agr    │ imports │ 0.762089  │\n│ 9   │ va     │ 2015  │ agr    │ exports │ 1.11601   │\n│ 10  │ va     │ 2015  │ agr    │ imports │ 0.88253   │\n│ 11  │ va     │ 2016  │ agr    │ exports │ 1.16253   │\n│ 12  │ va     │ 2016  │ agr    │ imports │ 0.86741   │\n\n\n\n\n\n","category":"function"},{"location":"api/functions/filter.html#Fill","page":"Filter and Resize","title":"Fill","text":"","category":"section"},{"location":"api/functions/filter.html","page":"Filter and Resize","title":"Filter and Resize","text":"fill_zero","category":"page"},{"location":"api/functions/filter.html#SLiDE.fill_zero","page":"Filter and Resize","title":"SLiDE.fill_zero","text":"fill_zero(keys_unique::NamedTuple; value_colnames)\nfill_zero(keys_unique::NamedTuple, df::DataFrame)\nfill_zero(df::DataFrame...)\nfill_zero(d::Dict...)\nfill_zero(keys_unique, d::Dict)\n\nThis function can be used to fill zeros in either a dictionary or DataFrame.\n\nOptions for dictionary editing:\nIf only (a) dictionary/ies is/are input, the dictionaries will be edited such that   they all contain all permutations of their key values. All dictionaries in a   resultant list of dictionaries will be the same length.\nIf a dictionary is input with a list of keys, it will be edited to ensure that it   includes all permutations.\nIf only a list of keys is input, a new dictionary will be created, containing all key   permutations with values initialized to zero.\nOptions for DataFrame editing:\nIf only (a) DataFrame(s) is/are input, the DataFrame(s) will be edited such that   they all contain all permutations of their key values. All DataFrames in a   resultant list of DataFrames will be the same length.\nIf a DataFrame is input with a NamedTuple, it will be edited to ensure that it   includes all permutations of the NamedTuple's values.\nIf only a NamedTuple is input, a new DataFrame will be created, containing all key   permutations with values initialized to zero.\n\nArguments\n\nkeys_unique::Tuple: A list of arrays whose permutations should be included in the   resultant dictionary.\nkeys_unique::NamedTuple: A list of arrays whose permutations should be included in the   resultant dictionary. The NamedTuple's keys correspond to the DataFrame columns where   they will be stored.\nd::Dict...: The dictionary/ies to edit.\ndf::DataFrame...: The DataFrame(s) to edit.\n\nKeywords\n\nvalue_colnames::Any = :value: \"value\" column labels to add and set to zero when creating   a new DataFrame. Default is :value.\n\nReturns\n\nd::Dict... if input included dictionaries and/or Tuples\ndf::DataFrame... if input included DataFrames and/or NamedTuples\n\n\n\n\n\n","category":"function"},{"location":"api/functions/filter.html","page":"Filter and Resize","title":"Filter and Resize","text":"Initialize a new DataFrame or dictionary.","category":"page"},{"location":"api/functions/filter.html","page":"Filter and Resize","title":"Filter and Resize","text":"using SLiDE","category":"page"},{"location":"api/functions/filter.html","page":"Filter and Resize","title":"Filter and Resize","text":"years = 2015:2016; regions = [\"md\",\"va\"];\nfill_zero((years, regions))\nfill_zero((yr = years, r = regions))","category":"page"},{"location":"api/functions/filter.html","page":"Filter and Resize","title":"Filter and Resize","text":"Edit an existing DataFrame or dictionary.","category":"page"},{"location":"api/functions/filter.html","page":"Filter and Resize","title":"Filter and Resize","text":"df = read_file(joinpath(SLIDE_DIR,\"docs\",\"src\",\"assets\",\"data\",\"fill_use.csv\"))\nfill_zero(df)","category":"page"},{"location":"api/functions/filter.html","page":"Filter and Resize","title":"Filter and Resize","text":"d = convert_type(Dict, df)\nfill_zero(d)","category":"page"},{"location":"api/functions/filter.html","page":"Filter and Resize","title":"Filter and Resize","text":"fill_with","category":"page"},{"location":"api/functions/filter.html#SLiDE.fill_with","page":"Filter and Resize","title":"SLiDE.fill_with","text":"Initialize a new DataFrame and fills it with the specified input value.\n\n\n\n\n\n","category":"function"},{"location":"api/internals/build.html","page":"-","title":"-","text":"<!– # Build","category":"page"},{"location":"api/internals/build.html","page":"-","title":"-","text":"Modules = [SLiDE]\nPages = [\"build/build.jl\"]\nPublic = false","category":"page"},{"location":"api/internals/build.html#SLiDE._filter_with!-Tuple{Dict,Dict{Symbol,Parameter}}","page":"-","title":"SLiDE._filter_with!","text":"\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.build_parameters-Tuple{String}","page":"-","title":"SLiDE.build_parameters","text":"build_parameters(subset::String)\n\nArguments\n\nsubset::String: Internally-passed parameter indicating the type of information to save   (set, parameter, or build step)\n\nReturns\n\nd::Dict{Symbol,SLiDE.Parameter} of Parameters relevant to the specified data   subset. The dictionary key is consistent the value's field parameter.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.data_path-Tuple{String}","page":"-","title":"SLiDE.data_path","text":"data_path(dataset::String)\n\nArguments\n\ndataset::String: Dataset identifier\n\nReturns\n\ndir::String = /path/to/dataset\nSLIDE_DIR is the path to the location of the SLiDE.jl package on the user's machine.\nThe default dataset identifier is state_model. This dataset includes all   U.S. states and summary-level sectors and goods.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.filter_build!-Tuple{String,Dict}","page":"-","title":"SLiDE.filter_build!","text":"filter_build!(subset::String, d::Dict; kwargs...)\n\nThis function filters d to contain only keys relevant to the specified subset. This avoids cluttering a saved directory with superfluous parameters that may have been calculated at intermediate steps.\n\nIf filtering DataFrames, this reorders the DataFrame indices. This is important when importing parameters into JuMP models when calibrating or modeling.\n\nArguments\n\nsubset::String: Internally-passed parameter indicating the type of information to save   (set, parameter, or build step)\nd::Dict of DataFrames containing data for the specified data subset\n\nReturns\n\nd::Dict filtered to include only relevant parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.read_build-Tuple{String,String}","page":"-","title":"SLiDE.read_build","text":"read_build(dataset::String, subset::String; kwargs...)\n\nThis function reads data from the specified subset if this information has previously been generated and saved.\n\nArguments\n\ndataset::String: Dataset identifier\nsubset::String: Internally-passed parameter indicating the type of information to save   (set, parameter, or build step)\n\nKeywords\n\noverwrite::Bool = true: If the user would like to re-generate the subset of data in    specified dataset, delete the directory. The information must now be re-calculated   to repopulate the subset directory.\n\nReturns\n\nd::Dict{Symbol,DataFrame} if reading parameters or d::Dict{Any,Array} if reading sets\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.sub_path-Tuple{String,String}","page":"-","title":"SLiDE.sub_path","text":"sub_path(dataset::String, subset::String; kwargs...)\n\nArguments\n\ndataset::String: Dataset identifier\nsubset::String: Internally-passed parameter indicating the type of information to save   (set, parameter, or build step)\n\nReturns\n\npath::String: Standardized location indicating where to save intermediate files.   Here, /path/to/dataset is returned by SLiDE.data_path\nIf saving build steps: /path/to/dataset/build/<build_step>. For the For the four build   steps, these are: partition, calibrate, share, and build.\nModel input parameters: /path/to/dataset/parameters\nParameter indices: /path/to/dataset/sets\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.write_build!-Tuple{String,String,Dict}","page":"-","title":"SLiDE.write_build!","text":"write_build(dataset::String, subset::String, d::Dict; kwargs...)\n\nThis function filters the contents of the input dictionary d to include only relevant files using SLiDE.filter_build! and writes set lists and parameter DataFrames to csv files in the directory named by SLiDE.sub_path and named for their associated dictionary key.\n\nArguments\n\ndataset::String: Dataset identifier\nsubset::String: Internally-passed parameter indicating the type of information to save   (set, parameter, or build step)\nd::Dict of information to write\n\nReturns\n\nd::Dict: filtered dictionary\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html","page":"-","title":"-","text":"–>","category":"page"},{"location":"man/build/share.html#Share","page":"Share","title":"Share","text":"","category":"section"},{"location":"man/build/share.html#CFS","page":"Share","title":"CFS","text":"","category":"section"},{"location":"man/build/share.html","page":"Share","title":"Share","text":"SLiDE.share_rpc!\nSLiDE._share_mrt0!\nSLiDE._share_d0!\nSLiDE._share_xn0!\nSLiDE._share_mn0!\nSLiDE._avg_ng","category":"page"},{"location":"man/build/share.html#SLiDE.share_rpc!","page":"Share","title":"SLiDE.share_rpc!","text":"rpc(r,g): Regional purchase coefficient\n\nrho_rg^cfs\n=\nbegincases\ndfracbard_rg\n       bard_rg - barmn_rg   rneq uti bard_rg neq barmn_rg\n\n00                                         rneq uti bard_rg = barmn_rg\n\n09                                         r = uti\nendcases\n\n\n\n\n\n","category":"function"},{"location":"man/build/share.html#SLiDE._share_mrt0!","page":"Share","title":"SLiDE._share_mrt0!","text":"mrt0(orig,dest,g): Interstate trade (CFS)\n\nbarmrt_origdestngni g = leftcfsleft(origdestgright)\nvert origneq dest  g right\n\n\n\n\n\n","category":"function"},{"location":"man/build/share.html#SLiDE._share_d0!","page":"Share","title":"SLiDE._share_d0!","text":"d0(r,g): Local supply-demand (CFS), trade that remains within the same region.\n\nbard_rngni g = leftcfsleft(origdestgright)\nvert orig=dest  g right\n\nCalling SLiDE._avg_ng returns bard_rngin g.\n\n\n\n\n\n","category":"function"},{"location":"man/build/share.html#SLiDE._share_xn0!","page":"Share","title":"SLiDE._share_xn0!","text":"xn0(r,g): National exports (CFS)\n\nbarxn_rngni g = sum_dest barmrt_origdestngni g\n\nCalling SLiDE._avg_ng returns barxn_rngin g.\n\n\n\n\n\n","category":"function"},{"location":"man/build/share.html#SLiDE._share_mn0!","page":"Share","title":"SLiDE._share_mn0!","text":"mn0(r,g): National demand (CFS)\n\nbarmn_rngni g = sum_orig barmrt_origdestngni g\n\nCalling SLiDE._avg_ng returns barmn_rngin g.\n\n\n\n\n\n","category":"function"},{"location":"man/build/share.html#SLiDE._avg_ng","page":"Share","title":"SLiDE._avg_ng","text":"barx_rngin g = dfracsum_g barx_rg\n    textlength(ng)\n\n\n\n\n\n","category":"function"},{"location":"man/build/share.html#GSP","page":"Share","title":"GSP","text":"","category":"section"},{"location":"man/build/share.html","page":"Share","title":"Share","text":"SLiDE.share_region!","category":"page"},{"location":"man/build/share.html#SLiDE.share_region!","page":"Share","title":"SLiDE.share_region!","text":"region(yr,r,s): Regional share of value added\n\nalpha_yrrs^gsp\n=\nbegincases\ndfrac           bargdp_yrrs\n       sum_s bargdp_yrrs       sum_s bargdp_yrrs neq 0\n\ndfracsum_s    bargdp_yrr s\n       sum_rs bargdp_yrrs     sum_s bargdp_yrrs = 0\nendcases\n\n\n\n\n\n","category":"function"},{"location":"man/build/share.html#PCE","page":"Share","title":"PCE","text":"","category":"section"},{"location":"man/build/share.html","page":"Share","title":"Share","text":"SLiDE.share_pce!","category":"page"},{"location":"man/build/share.html#SLiDE.share_pce!","page":"Share","title":"SLiDE.share_pce!","text":"pce(yr,r,g): Regional shares of final consumption\n\nalpha_yrrg^pce = dfracbarpce_yrrgsum_r barpce_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/share.html#SGF","page":"Share","title":"SGF","text":"","category":"section"},{"location":"man/build/share.html","page":"Share","title":"Share","text":"SLiDE.share_sgf!","category":"page"},{"location":"man/build/share.html#SLiDE.share_sgf!","page":"Share","title":"SLiDE.share_sgf!","text":"sgf(yr,r,g): State Government Finance data.\n\nalpha_yrrg^sgf = dfracbarsgf_yrrgsum_r barsgf_yrrg\n\nNote: D.C. is not included in the original data set. Assume its SGF data is equal to Maryland's.\n\n\n\n\n\n","category":"function"},{"location":"man/build/share.html#UTD","page":"Share","title":"UTD","text":"","category":"section"},{"location":"man/build/share.html","page":"Share","title":"Share","text":"SLiDE.share_utd!","category":"page"},{"location":"man/build/share.html#SLiDE.share_utd!","page":"Share","title":"SLiDE.share_utd!","text":"utd(yr,r,g,t): Share of total trade by region.\n\nalpha_yrrgt^utd\n=\nbegincases\ndfrac           barutd_yrr gt\n       sum_r barutd_yrrgt         notrdni g\n\ndfracsum_yr    barutd_yrr gt\n       sum_yrr barutd_yrrgt    notrdin g\nendcases\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#Disaggregate","page":"Disaggregate","title":"Disaggregate","text":"","category":"section"},{"location":"man/build/disagg.html","page":"Disaggregate","title":"Disaggregate","text":"SLiDE._disagg_ys0!\nSLiDE._disagg_id0!\nSLiDE._disagg_ty0!\nSLiDE._disagg_va0!\nSLiDE._disagg_ld0!\nSLiDE._disagg_kd0!","category":"page"},{"location":"man/build/disagg.html#SLiDE._disagg_ys0!","page":"Disaggregate","title":"SLiDE._disagg_ys0!","text":"ys(yr,r,s,g), regional sectoral output\n\nbarys_yrrsg = alpha_yrrs^gsp tildeys_yrsg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_id0!","page":"Disaggregate","title":"SLiDE._disagg_id0!","text":"id(yr,r,g,s), regional intermediate demand\n\nbarid_yrrgs = alpha_yrrs^gsp tildeid_yrgs\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_ty0!","page":"Disaggregate","title":"SLiDE._disagg_ty0!","text":"ty(yr,r,s), production tax rate\n\nbeginaligned\nbarty_yrrs^rev = alpha_yrrs^gsp tildeva_yrvas forall va = othtax \nbarty_yrrs = fractildety_yrrssum_g barys_yrrsg\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_va0!","page":"Disaggregate","title":"SLiDE._disagg_va0!","text":"va(yr,va,s), regional value added\n\nbarva_yrrs = alpha_yrrs^gsp sum_va = compensurplus tildeva_yrvas\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_ld0!","page":"Disaggregate","title":"SLiDE._disagg_ld0!","text":"ld0(yr,r,s), labor demand\n\nbarld_yrrs = theta_yrrs^ls barva_yrsg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_kd0!","page":"Disaggregate","title":"SLiDE._disagg_kd0!","text":"kd0(yr,r,s), capital demand\n\nbarkd_yrrs = barva_yrrs - barld_yrrs\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html","page":"Disaggregate","title":"Disaggregate","text":"SLiDE._disagg_fdcat!\nSLiDE._disagg_g0!\nSLiDE._disagg_i0!\nSLiDE._disagg_cd0!\nSLiDE._disagg_c0!","category":"page"},{"location":"man/build/disagg.html#SLiDE._disagg_fdcat!","page":"Disaggregate","title":"SLiDE._disagg_fdcat!","text":"_disagg_fdcat!(d::Dict)\n\nThis function aggregates final demand categories into national consumption (C), government (G), and investment (I) demand.\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_g0!","page":"Disaggregate","title":"SLiDE._disagg_g0!","text":"g0(yr,r,g), national government demand\n\nbarg_yrrg = alpha_yrrg^sgf sum_G in fd tildefd_yrgfd\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_i0!","page":"Disaggregate","title":"SLiDE._disagg_i0!","text":"i0(yr,r,g), national investment demand\n\nbari_yrrg = alpha_yrrg^gsp sum_I in fd tildefd_yrgfd\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_cd0!","page":"Disaggregate","title":"SLiDE._disagg_cd0!","text":"cd0(yr,r,g), national final consumption\n\nbarcd_yrrg = alpha_yrrg^pce sum_C in fd tildefd_yrgfd\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_c0!","page":"Disaggregate","title":"SLiDE._disagg_c0!","text":"c0(yr,r), total final household consumption\n\nbarc_yrr = sum_g barcd_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html","page":"Disaggregate","title":"Disaggregate","text":"SLiDE._disagg_yh0!\nSLiDE._disagg_s0!\nSLiDE._disagg_x0!\nSLiDE._disagg_rx0!","category":"page"},{"location":"man/build/disagg.html#SLiDE._disagg_yh0!","page":"Disaggregate","title":"SLiDE._disagg_yh0!","text":"yh0(yr,r,g), household production\n\nbaryh_yrrg = alpha_yrrg tildefs_yrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_s0!","page":"Disaggregate","title":"SLiDE._disagg_s0!","text":"s0(yr,r,g), total supply\n\nbars_yrrg = sum_s barys_yrrsg + baryh_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_x0!","page":"Disaggregate","title":"SLiDE._disagg_x0!","text":"x0(yr,r,g), foreign exports\n\nbarx_yrrg = alpha_yrrg^utd tildex_yrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_rx0!","page":"Disaggregate","title":"SLiDE._disagg_rx0!","text":"rx0(yr,r,g), re-exports\n\nbarrx_yrrg = barx_yrrg - bars_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html","page":"Disaggregate","title":"Disaggregate","text":"SLiDE._disagg_a0!\nSLiDE._disagg_thetaa!\nSLiDE._disagg_m0!\nSLiDE._disagg_md0!\nSLiDE._disagg_bop!\n\nSLiDE._disagg_pt0\nSLiDE._disagg_dc0!\nSLiDE._disagg_dd0max!\nSLiDE._disagg_dd0!\nSLiDE._disagg_nd0!\n\nSLiDE._disagg_mrgshr\nSLiDE._disagg_ms0tot!\nSLiDE._disagg_shrtrd!\nSLiDE._disagg_dm0!\nSLiDE._disagg_nm0!\nSLiDE._disagg_xd0!\nSLiDE._disagg_xn0!\nSLiDE._disagg_hhadj!","category":"page"},{"location":"man/build/disagg.html#SLiDE._disagg_a0!","page":"Disaggregate","title":"SLiDE._disagg_a0!","text":"a0(yr,r,g), domestic absorption\n\na_yrrg = barcd_yrrg + barg_yrrg + bari_yrrg + sum_sbarid_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_thetaa!","page":"Disaggregate","title":"SLiDE._disagg_thetaa!","text":"thetaa(yr,r,g), share of regional absorption\n\nalpha_yrrg^abs = fracbara_yrrgsum_rrbara_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_m0!","page":"Disaggregate","title":"SLiDE._disagg_m0!","text":"m0(yr,r,g), foreign Imports\n\nbarm_yrrg = alpha_yrrg^abs tildem_yrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_md0!","page":"Disaggregate","title":"SLiDE._disagg_md0!","text":"md0(yr,r,m,g), margin demand\n\nbarmd_yrrmg = alpha_yrrg^abs tildemd_yrmg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_bop!","page":"Disaggregate","title":"SLiDE._disagg_bop!","text":"bopdef0(yr,r), balance of payments (closure parameter)\n\nbarbop_yrr = sum_g left( barm_yrrg - barx_yrrg right)\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_pt0","page":"Disaggregate","title":"SLiDE._disagg_pt0","text":"pt0, \n\nbeginaligned\nbarpt_yrrg = left(1 - barta_yrrg right) bara_yrrg + barrx_yrrg\n               - left(1 + bartm_yrrg right) barm_yrrg - sum_m barmd_yrrmg\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_dc0!","page":"Disaggregate","title":"SLiDE._disagg_dc0!","text":"dc0, \n\nbardc_yrrg = bars_yrrg - barx_yrrg + barrx_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_dd0max!","page":"Disaggregate","title":"SLiDE._disagg_dd0max!","text":"dd0max(yr,r,g), maximum regional demand from local market\n\nhatdd_yrrg = minleftbarpt_yrrg bardc_yrrg right\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_dd0!","page":"Disaggregate","title":"SLiDE._disagg_dd0!","text":"dd0(yr,r,g), regional demand from local market\n\nbardd_yrrg = rho_rg^cfs hatdd_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_nd0!","page":"Disaggregate","title":"SLiDE._disagg_nd0!","text":"nd0_(yr,r,g), regional demand from national market\n\nbarnd_yrrg = barpt_yrrg - bardd_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_mrgshr","page":"Disaggregate","title":"SLiDE._disagg_mrgshr","text":"mrgshr(yr,r,m), share of margin demand by region\n\nalpha_yrrm^md = fracsum_gbarmd_yrrmgsum_rgbarmd_yrrmg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_ms0tot!","page":"Disaggregate","title":"SLiDE._disagg_ms0tot!","text":"ms0tot(yr,r,m,g), designate total supply of margins\n\nhatms_yrrmg = alpha_yrrm^md barms_yrgm\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_shrtrd!","page":"Disaggregate","title":"SLiDE._disagg_shrtrd!","text":"shrtrd(yr,r,g,m), share of margin total by margin type\n\nbeta_yrrgm^mar = frachatms_yrrgmsum_mhatms_yrrgm\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_dm0!","page":"Disaggregate","title":"SLiDE._disagg_dm0!","text":"dm0(yr,r,g,m), margin supply from the local market\n\nbardm_yrrgm = minleft rho_rg^cfshatms_yrrgm\n    beta_yrrmg^mar left(bardc_yrrg - bardd_yrrgright) right\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_nm0!","page":"Disaggregate","title":"SLiDE._disagg_nm0!","text":"nm0(yr,r,g,m), margin demand from the national market\n\nbarnm_yrrgm = hatms_yrrgm - bardm_yrrgm\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_xd0!","page":"Disaggregate","title":"SLiDE._disagg_xd0!","text":"xd0(yr,r,g), regional supply to local market\n\nbarxd_yrrg = sum_mbardm_yrrgm + bardd_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_xn0!","page":"Disaggregate","title":"SLiDE._disagg_xn0!","text":"xn0(yr,r,g), regional supply to national market\n\nbarxn_yrrg = bars_yrrg + barrx_yrrg - barxd_yrrg - barx_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_hhadj!","page":"Disaggregate","title":"SLiDE._disagg_hhadj!","text":"hhadj(yr,r), household adjustment\n\nbeginaligned\nbaradj^hh_yrr = barc_yrr\n - sum_sleft( barld_yrrs + barkd_yrrs + baryh_yrrs right) - barbop_yrr\n - sum_sleft( barta_yrrsbara0_yrrs + bartm_yrrsbarm_yrrs + barty_yrrssum_gbarys_yrrsg right)\n + sum_sleft( barg_yrrs + bari_yrrs right)\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html","page":"Disaggregate","title":"Disaggregate","text":"SLiDE._disagg_ta0!\nSLiDE._disagg_tm0!","category":"page"},{"location":"man/build/disagg.html#SLiDE._disagg_ta0!","page":"Disaggregate","title":"SLiDE._disagg_ta0!","text":"ta0(yr,r,g): Absorption taxes\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_tm0!","page":"Disaggregate","title":"SLiDE._disagg_tm0!","text":"tm0(yr,r,g): Import taxes\n\n\n\n\n\n","category":"function"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"using SLiDE, DataFrames","category":"page"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"y = read_file(joinpath(SLIDE_DIR,\"docs\",\"src\",\"assets\",\"yaml\",\"gsp_state.yml\"));","category":"page"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"df = read_file([SLIDE_DIR; y[\"PathIn\"]], y[\"CSVInput\"]);\nshow(df, allcols = true, splitcols = false) # hide","category":"page"},{"location":"man/data/preparation.html#Deselect","page":"Preparation","title":"Deselect","text":"","category":"section"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"y[\"Deselect\"]\ndf = edit_with(df, y[\"Deselect\"]);\nshow(df, allcols = true, splitcols = false) # hide","category":"page"},{"location":"man/data/preparation.html#Rename","page":"Preparation","title":"Rename","text":"","category":"section"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"y[\"Rename\"]\ndf = edit_with(df, y[\"Rename\"]);\nshow(df, allcols = true, splitcols = false) # hide","category":"page"},{"location":"man/data/preparation.html#Match","page":"Preparation","title":"Match","text":"","category":"section"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"y[\"Match\"]\ndf = edit_with(df, y[\"Match\"]);\nshow(df, allcols = true, splitcols = false) # hide","category":"page"},{"location":"man/data/preparation.html#Melt","page":"Preparation","title":"Melt","text":"","category":"section"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"y[\"Melt\"]\ndf = edit_with(df, y[\"Melt\"]);\nshow(df, allcols = true, splitcols = false) # hide","category":"page"},{"location":"man/data/preparation.html#Map","page":"Preparation","title":"Map","text":"","category":"section"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"Standardize region names.","category":"page"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"y[\"Map\"][1]\ndf = edit_with(df, y[\"Map\"][1]);\nshow(df, allcols = true, splitcols = false) # hide","category":"page"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"Standardize unit names and set up for the conversion from millions to billions of us dollars (USD).","category":"page"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"y[\"Map\"][2]\ndf = edit_with(df, y[\"Map\"][2]);\nshow(df, allcols = true, splitcols = false) # hide","category":"page"},{"location":"man/data/preparation.html#Replace","page":"Preparation","title":"Replace","text":"","category":"section"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"y[\"Replace\"]\ndf = edit_with(df, y[\"Replace\"]);\nshow(df, allcols = true, splitcols = false) # hide","category":"page"},{"location":"man/data/preparation.html#Drop","page":"Preparation","title":"Drop","text":"","category":"section"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"y[\"Drop\"]\ndf = edit_with(df, y[\"Drop\"]);\nshow(df, allcols = true, splitcols = false) # hide","category":"page"},{"location":"man/data/preparation.html#Operate","page":"Preparation","title":"Operate","text":"","category":"section"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"y[\"Operate\"]\ndf = edit_with(df, y[\"Operate\"]);\nshow(df, allcols = true, splitcols = false) # hide","category":"page"},{"location":"man/data/preparation.html#Describe","page":"Preparation","title":"Describe","text":"","category":"section"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"y[\"Describe\"]\ndf = edit_with(df, y[\"Describe\"], y[\"CSVInput\"]);\nshow(df, allcols = true, splitcols = false) # hide","category":"page"},{"location":"man/data/preparation.html#Order","page":"Preparation","title":"Order","text":"","category":"section"},{"location":"man/data/preparation.html","page":"Preparation","title":"Preparation","text":"y[\"Order\"]\ndf = edit_with(df, y[\"Order\"]);\nshow(df, allcols = true, splitcols = false) # hide","category":"page"},{"location":"api/internals/parse.html#Parse","page":"Parse","title":"Parse","text":"","category":"section"},{"location":"api/internals/parse.html#Edit","page":"Parse","title":"Edit","text":"","category":"section"},{"location":"api/internals/parse.html","page":"Parse","title":"Parse","text":"Modules = [SLiDE]\nPages = [\"parse/edit_data.jl\"]\nPublic = false","category":"page"},{"location":"api/internals/parse.html#Load","page":"Parse","title":"Load","text":"","category":"section"},{"location":"api/internals/parse.html","page":"Parse","title":"Parse","text":"Modules = [SLiDE]\nPages = [\"parse/load_data.jl\"]\nPublic = false","category":"page"},{"location":"api/internals/parse.html#Verify","page":"Parse","title":"Verify","text":"","category":"section"},{"location":"api/internals/parse.html","page":"Parse","title":"Parse","text":"Modules = [SLiDE]\nPages = [\"parse/check_data.jl\"]\nPublic = false","category":"page"},{"location":"index.html#SLiDE-Documentation","page":"Home","title":"SLiDE Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Intro to SLiDE","category":"page"},{"location":"index.html#Getting-Started:-Installation-and-First-Steps","page":"Home","title":"Getting Started: Installation and First Steps","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Clone this repo to your local machine.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"> git clone https://github.com/NREL/SLiDE.git","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"From the SLiDE directory, open Julia using","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"> julia --project","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Build the SLiDE package from the Pkg REPL. Type ] to enter the Pkg REPL and run:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(SLiDE) pkg> build","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This will generate the Manifest.toml file, including the package dependencies. If the directory SLiDE/data/ does not exist, this will download SLiDE input data.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Precompile the SLiDE package and build the model input data by running:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> using SLiDE\n\njulia> (d, set) = build()","category":"page"},{"location":"index.html#References","page":"Home","title":"References","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Thomas F. Rutherford and Andrew Schreiber, \"Tools for Open Source, Subnational CGE   Modeling with an Illustrative Analysis of Carbon Leakage,\"   J Global Econ Anal 4(2): 1-66.","category":"page"},{"location":"man/parameters.html#Parameters","page":"Parameters","title":"Parameters","text":"","category":"section"},{"location":"man/parameters.html#BEA-Supply/Use","page":"Parameters","title":"BEA Supply/Use","text":"","category":"section"},{"location":"man/parameters.html","page":"Parameters","title":"Parameters","text":"Parameter Variables Description\nid0 (yr,i,j) Intermediate demand\nfd0 (yr,i,fd) Final demand\nva0 (yr,va,j) Value added\nts0 (yr,ts,j) Taxes and subsidies\nx0 (yr,i) Exports of goods and services\nys0 (yr,i,j) Sectoral supply\nm0 (yr,i) Imports\nmrg0 (yr,i) Trade margins\ntrn0 (yr,i) Transportation costs\ncif0 (yr,i) CIF/FOB Adjustments on Imports\nduty0 (yr,i) Import duties\ntax0 (yr,i) Taxes on products\nsbd0 (yr,i) Subsidies on products\ns0 (yr,j) Aggregate supply\ny0 (yr,i) Gross output\nbopdef0 (yr) Balance of payments deficit\nms0 (yr,i,m) Margin supply\nmd0 (yr,m,i) Margin demand\nfs0 (yr,i,fd) Household supply\na0 (yr,i) Armington supply\ntm0 (yr,i) Tax net subsidy rate on intermediate demand\nta0 (yr,i) Import tariff\nlshr0 (yr,g) Labor share of value added","category":"page"},{"location":"man/parameters.html#Sharing","page":"Parameters","title":"Sharing","text":"","category":"section"},{"location":"man/parameters.html","page":"Parameters","title":"Parameters","text":"Parameter Variables Description\npce (yr,r,g) Regional shares of final consumption\nutd (yr,r,s,t) Share of total trade by region\ngsp (yr,r,s) Annual gross state product\nregion (yr,r,s) Regional shares of value added\nlabor (yr,r,s) Share of regional value added due to labor\nrpc (r,g) Regional purchase coefficient","category":"page"},{"location":"man/parameters.html","page":"Parameters","title":"Parameters","text":"Intermediate values","category":"page"},{"location":"man/parameters.html","page":"Parameters","title":"Parameters","text":"Parameter Variables Description\nnetval (yr,r,s) Net value added (compensation + surplus)\nseclaborshr (yr,s) Sector level average labor shares\navgwgshr (r,s) Average wage share\nd0 (r,g) Local supply-demand\nmrt0 (r,r,g) Interstate trade\nxn0 (r,g) National exports\nmn0 (r,g) National demand","category":"page"}]
}
