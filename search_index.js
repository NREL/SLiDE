var documenterSearchIndex = {"docs":
[{"location":"api/model.html#Model","page":"Model","title":"Model","text":"","category":"section"},{"location":"api/model.html","page":"Model","title":"Model","text":"Describe model features","category":"page"},{"location":"api/functions/parse.html#Parse","page":"Parse","title":"Parse","text":"","category":"section"},{"location":"api/functions/parse.html#Edit","page":"Parse","title":"Edit","text":"","category":"section"},{"location":"api/functions/parse.html","page":"Parse","title":"Parse","text":"Modules = [SLiDE]\nPages = [\"parse/edit_data.jl\"]\nPrivate = false","category":"page"},{"location":"api/functions/parse.html#SLiDE.edit_with-Tuple{DataFrames.DataFrame,Add}","page":"Parse","title":"SLiDE.edit_with","text":"edit_with(y::Dict{Any,Any}; kwargs...)\nedit_with(df::DataFrame, editor::T) where T<:Edit\nedit_with(df::DataFrame, lst::Array{T}) where T<:Edit\nedit_with(df::DataFrame, x::Describe, file::T) where T<:File\nedit_with(file::T, y::Dict{Any,Any}; kwargs...)\nedit_with(files::Array{T,N} where N, y::Dict{Any,Any}; kwargs...) where T<:File\n\nThis function edits the input DataFrame df and returns the resultant DataFrame.\n\nArguments\n\ndf::DataFrame on which to perform the edit.\neditor::T where T<:Edit: DataType containing information about which edit to perform.   The following edit options are available and detailed below. If given a dictionary of   edits, they will be made in this order:\nSLiDE.Drop: Remove information from the DataFrame – either an entire column   or rows containing specified values.\nSLiDE.Rename: Change column name from -> to.\nSLiDE.Group: Use to edit files containing data in successive dataframes with   an identifying header cell or row.\nSLiDE.Match: Extract values from the specified column into a column or   columns based on the specified regular expression.\nSLiDE.Melt: Normalize the dataframe by 'melting' columns into rows,    lengthening the dataframe by duplicating values in the column on into new rows and   defining 2 new columns:\nvar with header names from the original dataframe.\nval with column values from the original dataframe.\nSLiDE.Add: Add new column col filled with val.\nSLiDE.Map: Define an output column containing values based on those in an   input column. The mapping columns from -> to are contained in a .csv file in   the coremaps directory. The columns input and from should contain the same   values, as should output and to.\nSLiDE.Replace: Replace values in col from -> to.\nSLiDE.Operate: Perform an arithmetic operation across multiple DataFrame columns or rows.\nSLiDE.Describe: This DataType is required when multiple DataFrames will be   appended into one output file (say, if multiple sheets from an XLSX file are   included). Before the DataFrames are appended, a column col will be added and   filled with the value in the file descriptor.\nSLiDE.Order: Rearranges columns in the order specified by cols and sets   them to the specified type.\nfile::T where T <: File: Data file containing information to read.\nfiles::Array{T} where T <: File: List of data files.\ny::Dict{Any,Any}: Dictionary containing all editing structures among other values read   from the yaml file. Dictionary keys must correspond EXACTLY with SLiDE.Edit DataType   names, or the edits will not be made.\n\nKeywords\n\nshorten::Bool = false or shorten::Int: if an integer length is specified, the   DataFrame will be shortened to the input value. This is meant to aid troubleshooting   during development.\n\nReturns\n\ndf::DataFrame including edit(s)\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.extrapolate_region","page":"Parse","title":"SLiDE.extrapolate_region","text":"extrapolate_region(df::DataFrame, yr::Array{Int64,1}; kwargs...)\nextrapolate_year(df::DataFrame, set::Dict; kwargs...)\n\nArguments:\n\ndf::DataFrame that might be in need of extrapolation.\nr::Pair = \"md\" => \"dc\": Pair indicating a region (r.first) to extrapolate to another   region (r.second). A suggested regional extrapolation: MD data will be used to   approximate DC data in the event that it is missing.\n\nKeyword Argument:\n\noverwrite::Bool = false: If data in the target region r.second is already present,   should it be overwritten?\n\nReturns:\n\ndf::DataFrame extrapolated in time.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/parse.html#SLiDE.extrapolate_year-Tuple{DataFrames.DataFrame,Array{Int64,1}}","page":"Parse","title":"SLiDE.extrapolate_year","text":"extrapolate_year(df::DataFrame, yr::Array{Int64,1}; kwargs...)\nextrapolate_year(df::DataFrame, set::Dict; kwargs...)\n\nArguments:\n\ndf::DataFrame that might be in need of extrapolation.\nyr::Array{Int64,1}: List of years overwhich extrapolation is possible (depending on the kwargs)\nset::Dict containing list of years, identified by the key :yr.\n\nKeyword Arguments:\n\nbackward::Bool = true: Do we extrapolate backward in time?\nforward::Bool = true: Do we extrapolate forward in time?\n\nReturns:\n\ndf::DataFrame extrapolated in time.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.fill_zero-Tuple{NamedTuple}","page":"Parse","title":"SLiDE.fill_zero","text":"fill_zero(keys_unique::NamedTuple; value_colnames)\nfill_zero(keys_unique::NamedTuple, df::DataFrame)\nfill_zero(df::DataFrame...)\nfill_zero(d::Dict...)\nfill_zero(keys_unique, d::Dict)\n\nArguments\n\nkeys_unique::Tuple: A list of arrays whose permutations should be included in the   resultant dictionary.\nkeys_unique::NamedTuple: A list of arrays whose permutations should be included in the   resultant dictionary. The NamedTuple's keys correspond to the DataFrame columns where   they will be stored.\nd::Dict...: The dictionary/ies to edit.\ndf::DataFrame...: The DataFrame(s) to edit.\n\nKeyword Arguments\n\nvalue_colnames::Any = :value: \"value\" column labels to add and set to zero when creating   a new DataFrame. Default is :value.\n\nUsage\n\nThis function can be used to fill zeros in either a dictionary or DataFrame.\n\nOptions for DataFrame editing:\nIf only (a) dictionary/ies is/are input, the dictionaries will be edited such that   they all contain all permutations of their key values. All dictionaries in a   resultant list of dictionaries will be the same length.\nIf a dictionary is input with a list of keys, it will be edited to ensure that it   includes all permutations.\nIf only a list of keys is input, a new dictionary will be created, containing all key   permutations with values initialized to zero.\nOptions for DataFrame editing:\nIf only (a) DataFrame(s) is/are input, the DataFrame(s) will be edited such that   they all contain all permutations of their key values. All DataFrames in a   resultant list of DataFrames will be the same length.\nIf a DataFrame is input with a NamedTuple, it will be edited to ensure that it   includes all permutations of the NamedTuple's values.\nIf only a NamedTuple is input, a new DataFrame will be created, containing all key   permutations with values initialized to zero.\n\nReturns\n\nd::Dict... if input included dictionaries and/or Tuples\ndf::DataFrame... if input included DataFrames and/or NamedTuples\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.filter_with-Tuple{DataFrames.DataFrame,Any}","page":"Parse","title":"SLiDE.filter_with","text":"filter_with(df::DataFrame, set::Any; kwargs...)\n\nArguments:\n\ndf::DataFrame to filter.\nset::Dict or set::NamedTuple: Values to keep in the DataFrame.\n\nKeyword Arguments:\n\nextrapolate::Bool = false: Add missing regions/years to the DataFrame?   If extrapolate is set to true, the following kwargs become relevant:\nWhen extrapolating over years,\nbackward::Bool = true: Do we extrapolate backward in time?\nforward::Bool = true: Do we extrapolate forward in time?\nWhen extrapolating across regions,\nr::Pair = \"md\" => \"dc\": Pair indicating a region (r.first) to extrapolate to   another region (r.second). A suggested regional extrapolation: MD data will be   used to approximate DC data in the event that it is missing.\noverwrite::Bool = false: If data in the target region r.second is already present,   should it be overwritten?\n\nReturns:\n\ndf::DataFrame with only the desired keys.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#Load","page":"Parse","title":"Load","text":"","category":"section"},{"location":"api/functions/parse.html","page":"Parse","title":"Parse","text":"Modules = [SLiDE]\nPages = [\"parse/load_data.jl\"]\nPrivate = false","category":"page"},{"location":"api/functions/parse.html#SLiDE.gams_to_dataframe-Tuple{Array{String,1}}","page":"Parse","title":"SLiDE.gams_to_dataframe","text":"gams_to_dataframe(xf::Array{String,1}; colpropertynames = false)\n\nThis function converts a GAMS map or set to a DataFrame, expanding sets into multiple rows.\n\nArguments\n\nxf::Array{String,1}: A list of rows of text from a .map or a .set input file.\n\nKeywords\n\ncolpropertynames = false: A user has the option to specify the column propertynames of the output   DataFrame. If none are specified, a default of [missing, missing_1, ...] will be used,   consistent with the default column headers for CSV.read() if column propertynames are missing.\n\nReturns\n\ndf::DataFrame: A dataframe representation of the GAMS map or set.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.load_from-Union{Tuple{T}, Tuple{Type{T},Array{Dict{Any,Any},1}}} where T","page":"Parse","title":"SLiDE.load_from","text":"load_from(::Type{T}, df::DataFrame) where T <: Any\n\nLoad a DataFrame df into a structure of type T.\n\nnote: Note\nThis requires that all structure fieldnames are also DataFrame column names. Extra dataframe columns are acceptable, although that information will not be used.\n\nArguments\n\n::Type{T} where T <: Any: Any DataType.\ndf::DataFrame: The DataFrame storing the information to store as a DataType.\n\nReturns\n\nx<:Any: The DataType specified as an argument.\nlst::Array{T} where T<:Any: A list of elements of the DataType specified as an argument   given a multi-row DataFrame.\n\nExample\n\ndf = DataFrame(from = [\"State\"], to = [\"region\"])\nload_from(Rename, df)\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.read_file-Tuple{Array{String,1},GAMSInput}","page":"Parse","title":"SLiDE.read_file","text":"read_file(file::String)\nread_file(path::Array{String,1}, file<:File; kwargs...)\nread_file(path::Array{String,1}, file::XLSXInput)\nread_file(path::String, x::T) where T<:File\nread_from(editor::T) where T<:Edit\n\nThis method to reads .csv mapping files required for editing. These files must be stored in the data/coremaps directory. It returns a .csv file.\n\nArguments\n\npath::Array{String,1} or path::String: Path to file location;   does not include file name.\nfile::String: Full path to file, including file name.\nfile<:File: A SLiDE DataType used to store information about a file. Options include:\nSLiDE.CSVInput\nSLiDE.XLSXInput\neditor<:Edit: A SLiDE DataType used to store information about an edit to make in a   DataFrame. Specifically, this function might be called for edit types that include the   field file in reference to \nSLiDE.Group\nSLiDE.Map\n\nKeywords\n\nshorten::Bool = false or shorten::Int: if an integer length is specified, the   DataFrame will be shortened to the input value. This is meant to aid troubleshooting   during development.\n\nReturns\n\ndf::DataFrame: If the input is a csv or xlsx file, this method will return a DataFrame.\nyml::Dict{Any,Any}: If the input file is a yaml file, this method will return a   dictionary. All keys that correspond with SLiDE DataStream DataTypes will be converted   to (lists of) those types.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.run_yaml-Tuple{String}","page":"Parse","title":"SLiDE.run_yaml","text":"run_yaml(filename::String)\nrun_yaml(filenames::Array{String,1})\n\nThis file runs (a) yaml file(s) if it includes the line Editable: true. If given a list of input files, the function will print a list of yaml files that were not marked as editable. A file might not be \"editable\" if SLiDE functionality cannot make all of the specified edits.\n\nArguments\n\nfilename::String or filenames::Array{String,1}: yaml file name (or list of propertynames) to run\n\nReturn\n\nfilename::String or filenames::Array{String,1}: yaml file name (or list of propertynames) that   was/were not ran by the function because they were annotated with Editable: false\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.write_yaml-Tuple{Any,XLSXInput}","page":"Parse","title":"SLiDE.write_yaml","text":"write_yaml(path, file::XLSXInput)\n\nThis function reads an XLSX file and writes a new yaml file containing the information in each spreadsheet column. Sheet propertynames in the XLSX file correspond to the directory where new files will be printed (path/file.sheet/). Yaml files will be named after the text in the column's first row.\n\nArguments\n\npath::String or path::Array{String,1}: XLSX file location. New yaml files will be   printed here, as well.\nfile::XLSXInput or files::Array{XLSXInput,1}: XLSX file information (file name, sheet name, sheet range) or list of multiple sheets.\n\nReturns\n\nfilenames::Array{String,1}: List of yaml files\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#Verify","page":"Parse","title":"Verify","text":"","category":"section"},{"location":"api/functions/parse.html","page":"Parse","title":"Parse","text":"Modules = [SLiDE]\nPages = [\"parse/check_data.jl\"]\nPrivate = false","category":"page"},{"location":"api/functions/parse.html#SLiDE.benchmark!-Tuple{Dict,Symbol,Dict,Dict}","page":"Parse","title":"SLiDE.benchmark!","text":"benchmark!(d_summ::Dict, k::Symbol, d_bench::Dict, d_calc::Dict;\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.compare_keys-Tuple{Array{DataFrames.DataFrame,1},Array{Symbol,1}}","page":"Parse","title":"SLiDE.compare_keys","text":"compare_keys(df_lst::Array{DataFrame,1}, inds::Array{Symbol,1})\n\nArguments\n\ndf_lst::Array{DataFrame,1}: List of DataFrames to compare.   These must all share the same column names.\ninds::Array{Symbol,1}: List of indicators that describe each DataFrame and track which   values/keys are present in each DataFrame. There must be an equal number of input   DataFrames and indicators.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.compare_summary-Tuple{Array{DataFrames.DataFrame,1},Array{Symbol,1}}","page":"Parse","title":"SLiDE.compare_summary","text":"compare_summary(df_lst::Array{DataFrame,1}, inds::Array{Symbol,1}; kwargs...)\n\nArguments\n\ndf_lst::Array{DataFrame,1}: List of DataFrames to compare.   These must all share the same column names.\ninds::Array{Symbol,1}: List of indicators that describe each DataFrame and track which   values/keys are present in each DataFrame. There must be an equal number of input   DataFrames and indicators.\n\nKeyword Argument\n\ntol::Float64 = 1E-6: Tolerance used when determining whether values are equal.   Default values is 1E-6.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.compare_values-Tuple{Array{DataFrames.DataFrame,1},Array{Symbol,1}}","page":"Parse","title":"SLiDE.compare_values","text":"compare_values(df_lst::Array{DataFrame,1}, inds::Array{Symbol,1})\n\nArguments\n\ndf_lst::Array{DataFrame,1}: List of DataFrames to compare.   These must all share the same column names.\ninds::Array{Symbol,1}: List of indicators that describe each DataFrame and track which   values/keys are present in each DataFrame. There must be an equal number of input   DataFrames and indicators.\n\nKeyword Argument\n\ntol::Float64 = 1E-6: Tolerance used when determining whether values are equal.   Default values is 1E-6.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/parse.html#SLiDE.verify_over-Tuple{DataFrames.DataFrame,Any}","page":"Parse","title":"SLiDE.verify_over","text":"verify_over(df::DataFrame, col::Any; tol = 1E-6)\n\n\n\n\n\n","category":"method"},{"location":"man/scaling.html#Scaling","page":"Scaling","title":"Scaling","text":"","category":"section"},{"location":"man/scaling.html#Regional-Scaling","page":"Scaling","title":"Regional Scaling","text":"","category":"section"},{"location":"man/scaling.html","page":"Scaling","title":"Scaling","text":"Source data is regional-specific and available for a variety of regional divisions: state, CBSA, CSA","category":"page"},{"location":"man/scaling.html","page":"Scaling","title":"Scaling","text":"Source Data Region State County CSA CBSA\nBEA Supply/Use N/A N/A N/A N/A N/A\n GSP ✅ ✅ ✅ ❌ ✅\n PCE ✅ ✅ ❌ ❌ ❌\nCensus CFS ❌ ✅ ❌ ✅ ✅\n SGF     \n UTD     \n NASS ❌ ✅ ❌ ❌ ❌\n      \n      ","category":"page"},{"location":"man/scaling.html","page":"Scaling","title":"Scaling","text":"The regional level identifiers used are consistent with those from the 2010 Census Summary File 1. Codes listed in the Census Delineation Files are used to identify regions.","category":"page"},{"location":"man/scaling.html#Sectoral-Scaling","page":"Scaling","title":"Sectoral Scaling","text":"","category":"section"},{"location":"man/scaling.html#BEA","page":"Scaling","title":"BEA","text":"","category":"section"},{"location":"man/scaling.html#NAICS","page":"Scaling","title":"NAICS","text":"","category":"section"},{"location":"man/scaling.html","page":"Scaling","title":"Scaling","text":"The NAICS Codes are structured into the following levels, indicated by the number of digits in the code:","category":"page"},{"location":"man/scaling.html","page":"Scaling","title":"Scaling","text":"Digits Level\n2 Sector\n3 Subsector\n4 Industry Group\n5 NAICS Industry\n6 National Industry","category":"page"},{"location":"man/data.html#Data","page":"Data","title":"Data","text":"","category":"section"},{"location":"man/data.html#blueNOTE-Data-Set","page":"Data","title":"blueNOTE Data Set","text":"","category":"section"},{"location":"man/data.html","page":"Data","title":"Data","text":"This is the SLiDE version of the blueNOTE dataset developed by the Wisconsin National Data Consortium (WiNDC). The SLiDE datastream is built on the groundwork laid by Thomas F. Rutherford, Andrew Schreiber, Gökçe Akin-Olçum, and Christoph Böhringer.","category":"page"},{"location":"man/data.html","page":"Data","title":"Data","text":"The data necessary to execute the SLiDE buildstream is stored in the following structure:","category":"page"},{"location":"man/data.html","page":"Data","title":"Data","text":"data/\n├── coremaps/\n└── coremaps/\n└── input/","category":"page"},{"location":"man/data.html#Data-Sources","page":"Data","title":"Data Sources","text":"","category":"section"},{"location":"man/data.html","page":"Data","title":"Data","text":"The blueNOTE dataset is compiled of the following data:","category":"page"},{"location":"man/data.html","page":"Data","title":"Data","text":"Bureau of Economic Analysis\nSupply and Use Tables (BEA)\nGross State Product (GSP)\nPersonal Consumer Expenditures (PCE)\nCensus Bureau\nCommodity Flow Survey (CFS)\nState Government Finance (SGF)\nState Exports/Imports (UTD)\nEnergy Information Administration\nState Energy Data System (SEDS)","category":"page"},{"location":"man/build/partition.html#Partition","page":"Partition","title":"Partition","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"Filter supply and use data for sectors and goods.","category":"page"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_io!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_io!","page":"Partition","title":"SLiDE._partition_io!","text":"ys0(yr,s,g), sectoral supply (with byproducts), and id0(yr,g,s), intermediate input demand\n\nFilter from supply/use data:\n\nbeginaligned\ntildeid_yrs = leftuseleft(yrijright)\nvert yr g in i s in j right\n\ntildeys_yrsg = leftsupplyleft(yrjiright)\nvert yr s in j g in i right\nendaligned\n\nTreat negative inputs as outputs:\n\nbeginaligned\ntildeys_yrsg = tildeys_yrsg - minleft0 tildeid_yrgs right \ntildeid_yrgs = maxleft 0 tildeid_yrsg right\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#Use","page":"Partition","title":"Use","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_ts0!\nSLiDE._partition_va0!\nSLiDE._partition_x0!\nSLiDE._partition_fd0!\nSLiDE._partition_fs0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_ts0!","page":"Partition","title":"SLiDE._partition_ts0!","text":"ts(yr,ts,s), taxes and subsidies\n\ntildets_yrtss = leftuseleft(yrijright)\nvert yr ts in i s in j right\n\nTreat negative inputs as outputs:\n\ntildets_yrtss = - tildets_yrtss\nforall ts = subsidies\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_va0!","page":"Partition","title":"SLiDE._partition_va0!","text":"va(yr,va,s), value added\n\ntildeva_yrvas = leftuseleft(yrijright)\nvert yr va in i s in j right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_x0!","page":"Partition","title":"SLiDE._partition_x0!","text":"x(yr,g), exports of goods and services\n\ntildex_yrg = leftuseleft(yrijright)\nvert yr g in i exports in j right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_fd0!","page":"Partition","title":"SLiDE._partition_fd0!","text":"fd(yr,g,fd), final demand\n\ntildefd_yrgfd = leftuseleft(yrijright)\nvert yr g in i fd in j right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_fs0!","page":"Partition","title":"SLiDE._partition_fs0!","text":"_partition_fs0!(d::Dict)\n\nfs0: Household supply. Move household supply of recycled goods into the domestic output market, from which some may be exported.\n\ntildefs_yrg = lefttildefd_yrgfd\nvert yr g in i fd = pce right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#Calculate-aggregates","page":"Partition","title":"Calculate aggregates","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_s0!\nSLiDE._partition_a0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_s0!","page":"Partition","title":"SLiDE._partition_s0!","text":"s(yr,s), aggregate supply\n\ntildes_yrs = sum_gtildeys_yrsg\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_a0!","page":"Partition","title":"SLiDE._partition_a0!","text":"a(yr,g), Armington supply\n\ntildea_yrg = sum_fdtildefd_yrgfd + sum_stildeid_yrgs\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#Supply","page":"Partition","title":"Supply","text":"","category":"section"},{"location":"man/build/partition.html#Make-insurance-adjustments.","page":"Partition","title":"Make insurance adjustments.","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_cif0!\nSLiDE._partition_m0!\nSLiDE._partition_trn0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_cif0!","page":"Partition","title":"SLiDE._partition_cif0!","text":"cif(yr,g), CIF/FOB Adjustments on Imports\n\ntildecif_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = ciffob right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_m0!","page":"Partition","title":"SLiDE._partition_m0!","text":"m(yr,g), imports\n\ntildem_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = imports right\n\nAdjust transport margins according to CIF/FOB adjustments:\n\ntildem_yrg = tildem_yrg + tildecif_yrg\nforall g = ins\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_trn0!","page":"Partition","title":"SLiDE._partition_trn0!","text":"trn(yr,g), transportation costs\n\ntildetrn_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = trncost right\n\ntildetrn_yrg = tildem_yrg + tildecif_yrg\nforall g neq ins\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#Calculate-margin-supply-and-demand.","page":"Partition","title":"Calculate margin supply and demand.","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_mrg0!\nSLiDE._partition_md0!\nSLiDE._partition_ms0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_mrg0!","page":"Partition","title":"SLiDE._partition_mrg0!","text":"mrg(yr,g), trade margins\n\ntildemrg_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = margins right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_md0!","page":"Partition","title":"SLiDE._partition_md0!","text":"md(yr,m,g), margin demand\n\nbeginaligned\ntildemd_yrmg = \nbegincases\ntildemrg_yrg   m = trd   \ntildetrn_yrg   m = trn\nendcases\n\ntildemd_yrmg = maxleft0 tildemd_yrmg right\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_ms0!","page":"Partition","title":"SLiDE._partition_ms0!","text":"ms(yr,g,m), margin supply\n\nbeginaligned\ntildems_yrgm = \nbegincases\ntildemrg_yrg   m = trd   \ntildetrn_yrg   m = trn\nendcases\n\ntildems_yrgm = maxleft0 -tildems_yrgm right\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_y0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_y0!","page":"Partition","title":"SLiDE._partition_y0!","text":"y(yr,g), gross output\n\ntildey_yrg = sum_stildeys_yrsg - sum_mtildems_yrgm\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#Calculate-import-tariffs.","page":"Partition","title":"Calculate import tariffs.","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_tax0!\nSLiDE._partition_sbd0!\nSLiDE._partition_ta0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_tax0!","page":"Partition","title":"SLiDE._partition_tax0!","text":"tax(yr,g), taxes on products\n\ntildetax_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = tax right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_sbd0!","page":"Partition","title":"SLiDE._partition_sbd0!","text":"sbd(yr,g), subsidies on products\n\ntildesbd_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = subsidies right\n\nTreat negative inputs as outputs:\n\ntildesbd_yrg = - tildesbd_yrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_ta0!","page":"Partition","title":"SLiDE._partition_ta0!","text":"ta(yr,g), import tariff\n\ntildeta_yrg = fractildetax_yrg - tildesbd_yrgtildea_yrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#Calculate-tax-rate-on-intermediate-demand.","page":"Partition","title":"Calculate tax rate on intermediate demand.","text":"","category":"section"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_duty0!\nSLiDE._partition_tm0!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_duty0!","page":"Partition","title":"SLiDE._partition_duty0!","text":"duty(yr,g), import duties\n\ntildeduty_yrg = leftsupplyleft(yrijright)\nvert yr g in i j = duties right\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html#SLiDE._partition_tm0!","page":"Partition","title":"SLiDE._partition_tm0!","text":"tm(yr,g), tax net subsidy rate on intermediate demand\n\ntildetm_yrg = fractildeduty_yrgtildem_yrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/partition.html","page":"Partition","title":"Partition","text":"SLiDE._partition_bop!","category":"page"},{"location":"man/build/partition.html#SLiDE._partition_bop!","page":"Partition","title":"SLiDE._partition_bop!","text":"bopdef(yr), balance of payments\n\ntildebop_yr = 0\nforall yr\n\n\n\n\n\n","category":"function"},{"location":"man/build/overview.html#Build","page":"Overview","title":"Build","text":"","category":"section"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"There are four steps required to build the cleaned input data for use in the model:","category":"page"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"Partition\nCalibrate\nShare\nDisaggregate","category":"page"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"The buildstream process and all of the notation included in the SLiDE documentation here is meant to replicate the WiNDC buildstream. For more information, please reference:","category":"page"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"Thomas F. Rutherford and Andrew Schreiber, \"Tools for Open Source, Subnational CGE   Modeling with an Illustrative Analysis of Carbon Leakage,\"   J Global Econ Anal 4(2): 1-66.","category":"page"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"build_data","category":"page"},{"location":"man/build/overview.html#SLiDE.build_data","page":"Overview","title":"SLiDE.build_data","text":"build_data(; kwargs...)\n\nKeywords\n\nsave = true:\nsave = true (default) or save::String = \"path/to/version\": Save data in each build\n\nstep in the path returned by SLiDE.build_path.\n\nsave = false: the files at each step will not be saved.\noverwrite = false: If data exists, do not read it. Rebuild the data from scratch.\n\nReturns\n\nd::Dict of DataFrames containing the model data.\nset::Dict of Arrays describing region, sector, final demand, etc.\n\n\n\n\n\n","category":"function"},{"location":"man/build/overview.html#Partition","page":"Overview","title":"Partition","text":"","category":"section"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"Divide BEA supply/use data into parameters.","category":"page"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"partition!","category":"page"},{"location":"man/build/overview.html#SLiDE.partition!","page":"Overview","title":"SLiDE.partition!","text":"partition!(d::Dict, set::Dict; kwargs...)\n\nArguments\n\nd::Dict of DataFrames containing the model data.\nset::Dict of Arrays describing region, sector, final demand, etc.\n\nKeywords\n\nsave = true\noverwrite = false\n\nSee SLiDE.build_data for keyword argument descriptions.\n\nReturns\n\nd::Dict of DataFrames containing the model data at the\n\n\n\n\n\n","category":"function"},{"location":"man/build/overview.html#Calibrate","page":"Overview","title":"Calibrate","text":"","category":"section"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"calibrate","category":"page"},{"location":"man/build/overview.html#SLiDE.calibrate","page":"Overview","title":"SLiDE.calibrate","text":"calibrate(d::Dict, set::Dict; save = true, overwrite = false)\ncalibrate(year::Int, d::Dict, set::Dict)\n\nArguments\n\nd::Dict of DataFrames containing the model data.\nset::Dict of Arrays describing region, sector, final demand, etc.\nyear::Int: year for which to perform calibration\n\nKeywords\n\nsave = true\noverwrite = false\n\nSee SLiDE.build_data for keyword argument descriptions.\n\nReturns\n\nd::Dict of DataFrames containing the model data at the calibration step.\n\n\n\n\n\n","category":"function"},{"location":"man/build/overview.html#Share","page":"Overview","title":"Share","text":"","category":"section"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"Divide data into regional component. This will guide how to break the national data into regional components by state or county.","category":"page"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"share!","category":"page"},{"location":"man/build/overview.html#SLiDE.share!","page":"Overview","title":"SLiDE.share!","text":"share!(d::Dict, set::Dict; save = true, overwrite = false)\n\nArguments\n\nd::Dict of DataFrames containing the model data.\nset::Dict of Arrays describing region, sector, final demand, etc.\n\nKeywords\n\nsave = true\noverwrite = false\n\nSee SLiDE.build_data for keyword argument descriptions.\n\nReturns\n\nd::Dict of DataFrames containing the model data at the sharing step.\n\n\n\n\n\n","category":"function"},{"location":"man/build/overview.html#Disaggregate","page":"Overview","title":"Disaggregate","text":"","category":"section"},{"location":"man/build/overview.html","page":"Overview","title":"Overview","text":"disagg!","category":"page"},{"location":"man/build/overview.html#SLiDE.disagg!","page":"Overview","title":"SLiDE.disagg!","text":"function disagg!(d::Dict, set::Dict; save = true, overwrite = false)\n\nArguments\n\nd::Dict of DataFrames containing the model data.\nset::Dict of Arrays describing region, sector, final demand, etc.\n\nKeywords\n\nsave = true\noverwrite = false\n\nSee SLiDE.build_data for keyword argument descriptions.\n\nReturns\n\nd::Dict of DataFrames containing the model data at the disaggregation step\n\n\n\n\n\n","category":"function"},{"location":"api/types/parse.html#Parsing","page":"Parsing","title":"Parsing","text":"","category":"section"},{"location":"api/types/parse.html#Edit","page":"Parsing","title":"Edit","text":"","category":"section"},{"location":"api/types/parse.html","page":"Parsing","title":"Parsing","text":"Modules = [SLiDE]\nPrivate = false\nFilter = t -> t <: SLiDE.Edit\nOrder = [:type]","category":"page"},{"location":"api/types/parse.html#SLiDE.Add","page":"Parsing","title":"SLiDE.Add","text":"mutable struct Add <: Edit\n    col::Symbol\n    val::Any\nend\n\nAdd new column col filled with val\n\nArguments\n\ncol::Symbol: name of new column\nval::Any: value to add to new column\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Describe","page":"Parsing","title":"SLiDE.Describe","text":"mutable struct Describe <: Edit\n    col::Symbol\nend\n\nThis DataType is required when multiple DataFrames will be appended into one output file (say, if multiple sheets from an XLSX file are included). Before the DataFrames are appended, a column col will be added and filled with the value in the file descriptor. !!!! Does it make sense to have a DataType with one field?\n\nArguments\n\ncol::Symbol: name of new column\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Drop","page":"Parsing","title":"SLiDE.Drop","text":"mutable struct Drop <: Edit\n    col::Symbol\n    val::Any\n    operation::String\nend\n\nRemove information from the dataframe - either an entire column or rows containing specified values.\n\nArguments\n\ncol::Symbol: name of column containing data to remove\nval::Any: value to drop\noperation::String: how to determine what to drop\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Group","page":"Parsing","title":"SLiDE.Group","text":"mutable struct Group <: Edit\n    file::String\n    from::Symbol\n    to::Array{Symbol,1}\n    input::Symbol\n    output::Array{Symbol,1}\nend\n\nUse to edit files containing data in successive dataframes with an identifying header cell or row.\n\nArguments\n\nfile::String: mapping .csv file name in the coremaps directory. The mapping file should correlate with the header information identifying each data group. It will be used to separate the header rows from data.\nfrom::Symbol: name of the mapping column containing input values\nto::Array{Symbol,1}: name of the mapping column containing output values\ninput::Symbol: name of the input column containing\noutput::Array{Symbol,1}: name of the output column created\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Map","page":"Parsing","title":"SLiDE.Map","text":"mutable struct Map <: Edit\n    file::String\n    from::Array{Symbol,1}\n    to::Array{Symbol,1}\n    input::Array{Symbol,1}\n    output::Array{Symbol,1}\n    kind::Symbol\nend\n\nDefine an output column containing values based on those in an input column. The mapping columns from -> to are contained in a .csv file in the coremaps directory. The columns input and from should contain the same values, as should output and to.\n\nArguments\n\nfile::String: mapping .csv file name in the coremaps directory\nfrom::Array{Symbol,1}: name of the mapping column containing input values\nto::Array{Symbol,1}: name of the mapping column containing output values\ninput::Array{Symbol,1}: name of the input column to map\noutput::Array{Symbol,1}: name of the output column created\nkind::Symbol: type of join to perform.\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Match","page":"Parsing","title":"SLiDE.Match","text":"mutable struct Match <: Edit\n    on::Regex\n    input::Symbol\n    output::Array{Symbol,1}\nend\n\nExtract values from the specified column into a column or columns based on the specified regular expression.\n\nArguments\n\non::Regex: string indicating where to split\ninput::Symbol: column to split\noutput::Array{Symbol,1}: column names to label text surrounding the split\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Melt","page":"Parsing","title":"SLiDE.Melt","text":"mutable struct Melt <: Edit\n    on::Array{Symbol,1}\n    var::Symbol\n    val::Symbol\nend\n\nNormalize the dataframe by 'melting' columns into rows, lengthening the dataframe by duplicating values in the column on into new rows and defining 2 new columns: 1. var with header names from the original dataframe. 2. val with column values from the original dataframe. This operation can only be performed once per dataframe.\n\nArguments\n\non::Array{Symbol,1}: name of column(s) NOT included in melt\nvar::Symbol: name of column containing header NAMES from the original dataframe\nval::Symbol: name of column containing VALUES from the original dataframe\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Operate","page":"Parsing","title":"SLiDE.Operate","text":"mutable struct Operate <: Edit\n    axis::Symbol\n    operation::String\n    from::Array{Symbol,1}\n    to::Array{Symbol,1}\n    input::Array{Symbol,1}\n    output::Symbol\nend\n\nPerform an arithmetic operation across multiple DataFrame columns.\n\nArguments\n\naxis::Symbol: Axis across which to perform operation\noperation::String: operation to perform (+, -, *, /)\nfrom::Array{Symbol,1}: name of original comment column (ex. units)\nto::Array{Symbol,1}: name of new comment column (ex. units)\ninput::Array{Symbol,1}: names of columns on which to operate\noutput::Symbol: name of result column\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Order","page":"Parsing","title":"SLiDE.Order","text":"mutable struct Order <: Edit\n    col::Array{Symbol,1}\n    type::Array{DataType,1}\nend\n\nRearranges columns in the order specified by cols and sets them to the specified type.\n\nArguments\n\ncol::Array{Symbol,1}: Ordered list of DataFrame columns\ntype::Array{DataType,1}: Ordered column types.\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Rename","page":"Parsing","title":"SLiDE.Rename","text":"mutable struct Rename <: Edit\n    from::Symbol\n    to::Symbol\nend\n\nChange column name from -> to.\n\nArguments\n\nfrom::Symbol: original column name\nto::Symbol: new column name\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Replace","page":"Parsing","title":"SLiDE.Replace","text":"mutable struct Replace <: Edit\n    col::Symbol\n    from::Any\n    to::Any\nend\n\nReplace values in col from -> to.\n\nArguments\n\ncol::Symbol: name of column containing values to be replaced\nfrom::Any: value to replace\nto::Any: new value\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.Stack","page":"Parsing","title":"SLiDE.Stack","text":"mutable struct Stack <: Edit\n    col::Array{Symbol,1}\n    on::Array{Symbol,1}\n    var::Symbol\nend\n\nConcatenate side-by-side DataFrames into one normal-form DataFrame.\n\nArguments\n\ncol::Array{Symbol,1}: final column names\non::Array{Symbol,1}: column name indicator specifying where to stack\nvar::Symbol: column name for storing indicator\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#File","page":"Parsing","title":"File","text":"","category":"section"},{"location":"api/types/parse.html","page":"Parsing","title":"Parsing","text":"Modules = [SLiDE]\nPrivate = false\nFilter = t -> t <: SLiDE.File\nOrder = [:type]","category":"page"},{"location":"api/types/parse.html#SLiDE.CSVInput","page":"Parsing","title":"SLiDE.CSVInput","text":"mutable struct CSVInput <: File\n    name::String\n    descriptor::String\nend\n\nRead .csv file\n\nArguments\n\nname::String: input file name\ndescriptor::String: file descriptor\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.GAMSInput","page":"Parsing","title":"SLiDE.GAMSInput","text":"mutable struct GAMSInput <: File\n    name::String\n    col::Array{Symbol,1}\nend\n\nRead .map or .set file\n\nArguments\n\nname::String: input file name\ncol::Array{Symbol,1}: column names\n\n\n\n\n\n","category":"type"},{"location":"api/types/parse.html#SLiDE.XLSXInput","page":"Parsing","title":"SLiDE.XLSXInput","text":"mutable struct XLSXInput <: File\n    name::String\n    sheet::String\n    range::String\n    descriptor::String\nend\n\nRead .xlsx file.\n\nArguments\n\nname::String: input file name\nsheet::String: input sheet name\nrange::String: input sheet range\ndescriptor::String: file descriptor\n\n\n\n\n\n","category":"type"},{"location":"api/internals/build.html#Build","page":"Build","title":"Build","text":"","category":"section"},{"location":"api/internals/build.html","page":"Build","title":"Build","text":"Modules = [SLiDE]\nPages = [\"build/build.jl\"]\nPublic = false","category":"page"},{"location":"api/internals/build.html#SLiDE.build_path-Tuple{String}","page":"Build","title":"SLiDE.build_path","text":"build_path(build_step::String; kwargs...)\n\nArguments\n\nbuild_step::String: Internally-passed parameter indicating the build step. For the four   build steps, these are: partition, calibrate, share, and build.\n\nKeyword Arguments\n\nsave: Will this data be saved? If so, where?\nsave = true (default): Save data in each build step (SLiDE.partition!,   SLiDE.calibrate, SLiDE.share!, SLiDE.disagg!)   to a directory in SLiDE/data/default/build/.\nsave = path/to/version: Build data will be saved in SLiDE/data/path/to/version/build/.\n\nReturns\n\npath::String: standardized location indicating where to save intermediate files.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.read_build-Tuple{String}","page":"Build","title":"SLiDE.read_build","text":"read_build(build_step::String; kwargs...)\n\nThis function reads intermediary build files if they have previously been saved by the user.\n\nReturns\n\nd::Dict of DataFrames\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.read_from-Tuple{String}","page":"Build","title":"SLiDE.read_from","text":"read_from(path::String)\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.read_set-Tuple{String}","page":"Build","title":"SLiDE.read_set","text":"read_set(path::String)\n\nThis function reads sets from the indicated paths.\n\nKeyword\n\npath::String: Path to location of yaml file describing which sets to store and   where they are located.\n\nReturns\n\nd::Dict of arrays containing set information.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.write_build-Tuple{String,Dict}","page":"Build","title":"SLiDE.write_build","text":"write_build(build_step::String, d::Dict; kwargs...)\n\nThis function writes intermediary build files if desired by the user.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#Share","page":"Build","title":"Share","text":"","category":"section"},{"location":"api/internals/build.html","page":"Build","title":"Build","text":"Modules = [SLiDE]\nPages = [\n    \"build/share_cfs.jl\",\n    \"build/share_gsp.jl\",\n    \"build/share_pce.jl\",\n    \"build/share_sgf.jl\",\n    \"build/share_utd.jl\"]\nPublic = false","category":"page"},{"location":"api/internals/build.html#SLiDE._avg_ng-Tuple{DataFrames.DataFrame,Dict,Dict}","page":"Build","title":"SLiDE._avg_ng","text":"!!!! \n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE._share_d0!-Tuple{Dict,Dict}","page":"Build","title":"SLiDE._share_d0!","text":"d0: Local supply-demand. Trade that remains within the same region.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE._share_mn0!-Tuple{Dict,Dict}","page":"Build","title":"SLiDE._share_mn0!","text":"mn0: National demand (CFS)\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE._share_mrt0!-Tuple{Dict}","page":"Build","title":"SLiDE._share_mrt0!","text":"mrt0: Interstate trade (CFS)\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE._share_ng!-Tuple{Dict,Dict}","page":"Build","title":"SLiDE._share_ng!","text":"ng: Sectors not included in the CFS.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE._share_xn0!-Tuple{Dict,Dict}","page":"Build","title":"SLiDE._share_xn0!","text":"xn0: National exports (CFS)\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.share_rpc!-Tuple{Dict,Dict}","page":"Build","title":"SLiDE.share_rpc!","text":"share_rpc!(d::Dict, set::Dict)\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE._share_gsp!-Tuple{Dict,Dict}","page":"Build","title":"SLiDE._share_gsp!","text":"gsp: Calculated gross state product.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE._share_hw!-Tuple{Dict,Dict}","page":"Build","title":"SLiDE._share_hw!","text":"hw(r,s): (region,sector) pairings with ALL wage shares > 1\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE._share_lshr0!-Tuple{Dict,Dict}","page":"Build","title":"SLiDE._share_lshr0!","text":"lshr0: Labor share of value added\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE._share_wg!-Tuple{Dict,Dict}","page":"Build","title":"SLiDE._share_wg!","text":"wg(yr,r,s): Index pairs with high wage shares (>1)\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.share_labor!-Tuple{Dict,Dict}","page":"Build","title":"SLiDE.share_labor!","text":"share_labor!(d::Dict, set::Dict)\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.share_region!-Tuple{Dict,Dict}","page":"Build","title":"SLiDE.share_region!","text":"share_region!(d::Dict, set::Dict)\n\nregion: Regional share of value added\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.share_pce!-Tuple{Dict}","page":"Build","title":"SLiDE.share_pce!","text":"share_pce!(d::Dict)\n\npce: Regional shares of final consumption\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.share_sgf!-Tuple{Dict}","page":"Build","title":"SLiDE.share_sgf!","text":"function share_sgf!(d::Dict)\n\nsgf: State Government Finance data.\n\nNote: D.C. is not included in the original data set, so assume its SGFs equal Maryland's.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#SLiDE.share_utd!-Tuple{Dict,Dict}","page":"Build","title":"SLiDE.share_utd!","text":"share_utd!(d::Dict, set::Dict)\n\nutd: Share of total trade by region.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/build.html#Disaggregate","page":"Build","title":"Disaggregate","text":"","category":"section"},{"location":"api/internals/build.html","page":"Build","title":"Build","text":"<!– @autodocs Modules = [SLiDE] Pages = [\"build/disagg.jl\"] Public = false –>","category":"page"},{"location":"man/build/disagg.html#Disaggregate","page":"Disaggregate","title":"Disaggregate","text":"","category":"section"},{"location":"man/build/disagg.html","page":"Disaggregate","title":"Disaggregate","text":"SLiDE._disagg_ys0!\nSLiDE._disagg_id0!\nSLiDE._disagg_ty0\nSLiDE._disagg_va0!\nSLiDE._disagg_ld0!\nSLiDE._disagg_kd0","category":"page"},{"location":"man/build/disagg.html#SLiDE._disagg_ys0!","page":"Disaggregate","title":"SLiDE._disagg_ys0!","text":"ys(yr,r,s,g), regional sectoral output\n\nbarys_yrrsg = alpha_yrrs^gsp tildeys_yrsg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_id0!","page":"Disaggregate","title":"SLiDE._disagg_id0!","text":"id(yr,r,g,s), regional intermediate demand\n\nbarid_yrrgs = alpha_yrrs^gsp tildeid_yrgs\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_ty0","page":"Disaggregate","title":"SLiDE._disagg_ty0","text":"ty(yr,r,s), production tax rate\n\nbeginaligned\nbarty_yrrs^rev = alpha_yrrs^gsp tildeva_yrvas forall va = othtax \nbarty_yrrs = fractildety_yrrssum_g barys_yrrsg\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_va0!","page":"Disaggregate","title":"SLiDE._disagg_va0!","text":"va(yr,va,s), regional value added\n\nbarva_yrrs = alpha_yrrs^gsp sum_va = compensurplus tildeva_yrvas\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_ld0!","page":"Disaggregate","title":"SLiDE._disagg_ld0!","text":"ld0, labor demand\n\nbarld_yrrs = theta_yrrs^ls barva_yrsg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_kd0","page":"Disaggregate","title":"SLiDE._disagg_kd0","text":"kd0, capital demand\n\nbarkd_yrrs = barva_yrrs - barld_yrrs\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html","page":"Disaggregate","title":"Disaggregate","text":"SLiDE._disagg_fdcat!\nSLiDE._disagg_g0!\nSLiDE._disagg_i0!\nSLiDE._disagg_cd0!\nSLiDE._disagg_c0!","category":"page"},{"location":"man/build/disagg.html#SLiDE._disagg_fdcat!","page":"Disaggregate","title":"SLiDE._disagg_fdcat!","text":"_disagg_fdcat!(d::Dict)\n\nThis function aggregates final demand categories into national consumption (C), government (G), and investment (I) demand.\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_g0!","page":"Disaggregate","title":"SLiDE._disagg_g0!","text":"g0(yr,r,s), national government demand\n\nbarg_yrrs = alpha_yrrs^sgf sum_G in fd tildefd_yrsfd\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_i0!","page":"Disaggregate","title":"SLiDE._disagg_i0!","text":"i0(yr,r,s), national investment demand\n\nbari_yrrs = alpha_yrrs^gsp sum_I in fd tildefd_yrsfd\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_cd0!","page":"Disaggregate","title":"SLiDE._disagg_cd0!","text":"cd0(yr,r,s), national final consumption\n\nbarcd_yrrs = alpha_yrrs^pce sum_C in fd tildefd_yrsfd\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_c0!","page":"Disaggregate","title":"SLiDE._disagg_c0!","text":"c0(yr,r), total final household consumption\n\nbarc_yrs = sum_s barcd_yrrs\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html","page":"Disaggregate","title":"Disaggregate","text":"SLiDE._disagg_yh0!\nSLiDE._disagg_s0!\nSLiDE._disagg_x0!\nSLiDE._disagg_rx0!","category":"page"},{"location":"man/build/disagg.html#SLiDE._disagg_yh0!","page":"Disaggregate","title":"SLiDE._disagg_yh0!","text":"yh0(yr,r,s), household production\n\nbaryh_yrs = alpha_yrrs tildefs_yrs\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_s0!","page":"Disaggregate","title":"SLiDE._disagg_s0!","text":"s0(yr,r,g), total supply\n\nbars_yrrg = sum_s barys_yrrsg + baryh_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_x0!","page":"Disaggregate","title":"SLiDE._disagg_x0!","text":"x0(yr,r,g), foreign exports\n\nbarx_yrrg = alpha_yrrg^utd tildex_yrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_rx0!","page":"Disaggregate","title":"SLiDE._disagg_rx0!","text":"rx0(yr,r,g), re-exports\n\nbarrx_yrrg = barx_yrrg - bars_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html","page":"Disaggregate","title":"Disaggregate","text":"SLiDE._disagg_a0!\nSLiDE._disagg_thetaa!\nSLiDE._disagg_m0!\nSLiDE._disagg_md0!\nSLiDE._disagg_bop!\n\nSLiDE._disagg_pt0!\nSLiDE._disagg_dc0!\nSLiDE._disagg_dd0max\nSLiDE._disagg_dd0!\nSLiDE._disagg_nd0!\n\nSLiDE._disagg_mrgshr\nSLiDE._disagg_ms0tot!\nSLiDE._disagg_shrtrd!\nSLiDE._disagg_dm0!\nSLiDE._disagg_nm0!\nSLiDE._disagg_xd0!\nSLiDE._disagg_xn0!\nSLiDE._disagg_hhadj!","category":"page"},{"location":"man/build/disagg.html#SLiDE._disagg_a0!","page":"Disaggregate","title":"SLiDE._disagg_a0!","text":"a0(yr,r,g), domestic absorption\n\na_yrrg = barcd_yrrg + barg_yrrg + bari_yrrg + sum_sbarid_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_thetaa!","page":"Disaggregate","title":"SLiDE._disagg_thetaa!","text":"thetaa(yr,r,g), share of regional absorption\n\nalpha_yrrg^abs = fracbara_yrrgsum_rrbara_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_m0!","page":"Disaggregate","title":"SLiDE._disagg_m0!","text":"m0(yr,r,g), foreign Imports\n\nbarm_yrrg = alpha_yrrg^abs tildem_yrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_md0!","page":"Disaggregate","title":"SLiDE._disagg_md0!","text":"md0(yr,r,m,g), margin demand\n\nbarmd_yrrmg = alpha_yrrg^abs tildemd_yrmg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_bop!","page":"Disaggregate","title":"SLiDE._disagg_bop!","text":"bopdef0(yr,r): Balance of payments (closure parameter)\n\nbarbop_yrr = sum_g left( barm_yrrg - barx_yrrg right)\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_pt0!","page":"Disaggregate","title":"SLiDE._disagg_pt0!","text":"pt0, \n\nbeginaligned\nbarpt_yrrg = left(1 - barta_yrrg right) bara_yrrg + barrx_yrrg\n               - left(1 + bartm_yrrg right) barm_yrrg - sum_m barmd_yrrmg\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_dc0!","page":"Disaggregate","title":"SLiDE._disagg_dc0!","text":"dc0, \n\nbardc_yrrg = bars_yrrg - barx_yrrg + barrx_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_dd0max","page":"Disaggregate","title":"SLiDE._disagg_dd0max","text":"dd0max(yr,r,g), maximum regional demand from local market\n\nhatdd_yrrg = minleftbarpt_yrrg bardc_yrrg right\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_dd0!","page":"Disaggregate","title":"SLiDE._disagg_dd0!","text":"dd0(yr,r,g), regional demand from local market\n\nbardd_yrrg = rho_rg^cfs hatdd_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_nd0!","page":"Disaggregate","title":"SLiDE._disagg_nd0!","text":"nd0_(yr,r,g), regional demand from national market\n\nbarnd_yrrg = barpt_yrrg - bardd_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_mrgshr","page":"Disaggregate","title":"SLiDE._disagg_mrgshr","text":"mrgshr(yr,r,m), share of margin demand by region\n\nalpha_yrrm^md = fracsum_gbarmd_yrrmgsum_rgbarmd_yrrmg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_ms0tot!","page":"Disaggregate","title":"SLiDE._disagg_ms0tot!","text":"totmrgsupply(yr,r,m,g), designate total supply of margins\n\nhatms_yrrmg = alpha_yrrm^md barms_yrgm\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_shrtrd!","page":"Disaggregate","title":"SLiDE._disagg_shrtrd!","text":"shrtrd(yr,r,m,g), share of margin total by margin type\n\nbeta_yrrgm^mar - frachatms_yrrgmsum_mhatms_yrrgm\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_dm0!","page":"Disaggregate","title":"SLiDE._disagg_dm0!","text":"dm0(yr,r,g,m), margin supply from the local market\n\nbardm_yrrgm = minleft rho_rg^cfshatms_yrrgm\n    beta_yrrmg^mar left(bardc_yrrg - bardd_yrrgright) right\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_nm0!","page":"Disaggregate","title":"SLiDE._disagg_nm0!","text":"nm0(yr,r,g,m), margin demand from the national market\n\nbarnm_yrrgm = hatms_yrrgm - bardm_yrrgm\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_xd0!","page":"Disaggregate","title":"SLiDE._disagg_xd0!","text":"xd0(yr,r,g), regional supply to local market\n\nbarxd_yrrg = sum_mbardm_yrrgm + bardd_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_xn0!","page":"Disaggregate","title":"SLiDE._disagg_xn0!","text":"xn0(yr,r,g), regional supply to national market\n\nbarxn_yrrg = bars_yrrg + barrx_yrrg - barxd_yrrg - barx_yrrg\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_hhadj!","page":"Disaggregate","title":"SLiDE._disagg_hhadj!","text":"hhadj(yr,r), household adjustment\n\nbeginaligned\nbaradj^hh_yrr = barc_yrr\n - sum_sleft( barld_yrrs + barkd_yrrs + baryh_yrrs right) - barbop_yrr\n - sum_sleft( barta_yrrsbara0_yrrs + bartm_yrrsbarm_yrrs + barty_yrrssum_gbarys_yrrsg right)\n + sum_sleft( barg_yrrs + bari_yrrs right)\nendaligned\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html","page":"Disaggregate","title":"Disaggregate","text":"SLiDE._disagg_ta0!\nSLiDE._disagg_tm0!","category":"page"},{"location":"man/build/disagg.html#SLiDE._disagg_ta0!","page":"Disaggregate","title":"SLiDE._disagg_ta0!","text":"ta0(yr,r,g): Absorption taxes\n\n\n\n\n\n","category":"function"},{"location":"man/build/disagg.html#SLiDE._disagg_tm0!","page":"Disaggregate","title":"SLiDE._disagg_tm0!","text":"tm0(yr,r,g): Import taxes\n\n\n\n\n\n","category":"function"},{"location":"api/internals/parse.html#Parse","page":"Parse","title":"Parse","text":"","category":"section"},{"location":"api/internals/parse.html#Edit","page":"Parse","title":"Edit","text":"","category":"section"},{"location":"api/internals/parse.html","page":"Parse","title":"Parse","text":"Modules = [SLiDE]\nPages = [\"parse/edit_data.jl\"]\nPublic = false","category":"page"},{"location":"api/internals/parse.html#SLiDE._expand_range-Union{Tuple{T}, Tuple{T}} where T<:AbstractString","page":"Parse","title":"SLiDE._expand_range","text":"_expand_range()\n\n\n\n\n\n","category":"method"},{"location":"api/internals/parse.html#SLiDE._sort_datastream-Tuple{DataFrames.DataFrame}","page":"Parse","title":"SLiDE._sort_datastream","text":"_sort_datastream(df::DataFrame)\n\nReturns the edited DataFrame, stored in a nicely-sorted order. This is most helpful for mapping and developing. Sorting isn't necessary and we could remove this function to save some time for users.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/parse.html#Load","page":"Parse","title":"Load","text":"","category":"section"},{"location":"api/internals/parse.html","page":"Parse","title":"Parse","text":"Modules = [SLiDE]\nPages = [\"parse/load_data.jl\"]\nPublic = false","category":"page"},{"location":"api/internals/parse.html#SLiDE._load_as_type-Tuple{Any,DataType}","page":"Parse","title":"SLiDE._load_as_type","text":"_load_as_type(::Type{Any}, entry, type::DataType)\n\nConverts an entry to the required DataType\n\n\n\n\n\n","category":"method"},{"location":"api/internals/parse.html#SLiDE._load_axis-Tuple{AbstractString}","page":"Parse","title":"SLiDE._load_axis","text":"_load_axis(entry::Any)\n\n\n\n\n\n","category":"method"},{"location":"api/internals/parse.html#SLiDE._load_case-Tuple{AbstractString}","page":"Parse","title":"SLiDE._load_case","text":"_load_case(entry::AbstractString)\n\nStandardizes string identifiers that indicate a case change (upper-to-lower or vice-versa) for easier editing.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/parse.html#SLiDE._load_path-Tuple{Dict}","page":"Parse","title":"SLiDE._load_path","text":"_load_path(d::Dict)\n\nEdits directories containing a list of directories ending in a file name as one path.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/parse.html#Verify","page":"Parse","title":"Verify","text":"","category":"section"},{"location":"api/internals/parse.html","page":"Parse","title":"Parse","text":"Modules = [SLiDE]\nPages = [\"parse/check_data.jl\"]\nPublic = false","category":"page"},{"location":"index.html#SLiDE-Documentation","page":"Home","title":"SLiDE Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Intro to SLiDE","category":"page"},{"location":"index.html#Getting-Started:-Installation-and-First-Steps","page":"Home","title":"Getting Started: Installation and First Steps","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Clone this repo to your local machine.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"> git clone https://github.com/NREL/SLiDE.git","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"From the SLiDE directory, open Julia using","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"> julia --project","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Build the SLiDE package from the Pkg REPL. Type ] to enter the Pkg REPL and run:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(SLiDE) pkg> build","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This will generate the Manifest.toml file, including the package dependencies. If the directory SLiDE/data/ does not exist, this will download SLiDE input data.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Build the model input data by running:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"> (d, set) = build_data()","category":"page"},{"location":"index.html#References","page":"Home","title":"References","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Thomas F. Rutherford and Andrew Schreiber, \"Tools for Open Source, Subnational CGE   Modeling with an Illustrative Analysis of Carbon Leakage,\"   J Global Econ Anal 4(2): 1-66.","category":"page"},{"location":"man/parameters.html#Sets","page":"Parameters","title":"Sets","text":"","category":"section"},{"location":"man/parameters.html","page":"Parameters","title":"Parameters","text":"Item Description\nyr Years – 1997-2016\nr Regions – currently includes 50 U.S. states and Washington, D.C.\ns,g Sectors/Goods – 71 sets from BEA summary data\nm Margin type for trade and transport adjustments\nva Value added components, including\nfd Final demand accounts related to personal consumption expenditures. These are aggregated into consumption (C), government (G), and investment (I) demand in SLiDE._disagg_fdcat!","category":"page"},{"location":"man/parameters.html#Model-Input","page":"Parameters","title":"Model Input","text":"","category":"section"},{"location":"man/parameters.html","page":"Parameters","title":"Parameters","text":"Parameter Variable Description References\nys (yr,r,s,g) Sectoral supply (with byproducts) SLiDE._partition_io! SLiDE._disagg_ys0!\nid (yr,r,g,s) Intermediate demand SLiDE._partition_io! SLiDE._disagg_id0!\nld (yr,r,s) Labor demand SLiDE._disagg_ld0!\nkd (yr,r,s) Capital demand SLiDE._disagg_kd0\ncd (yr,r,g) Final demand SLiDE._disagg_cd0!\nyh (yr,r,g) Household production SLiDE._disagg_yh0!\ng (yr,r,g) Government demand SLiDE._disagg_g0!\ni (yr,r,g) Investment demand SLiDE._disagg_i0!\ns (yr,r,g) Aggregate supply SLiDE._disagg_s0!\nxn (yr,r,g) National supply SLiDE._disagg_xn0!\nxd (yr,r,g) National demand SLiDE._disagg_xd0!\nx (yr,r,g) Foreign exports SLiDE._partition_x0! SLiDE._disagg_x0!\na (yr,r,g) Armington supply SLiDE._partition_a0! SLiDE._disagg_a0!\nm (yr,r,g) Imports SLiDE._partition_m0! SLiDE._disagg_x0!\nnd (yr,r,g) National demand SLiDE._disagg_nd0!\ndd (yr,r,g) State-level demand SLiDE._disagg_dd0!\nbop (yr,r) Balance of payments SLiDE._partition_bop! SLiDE._disagg_bop!\nta (yr,r,g) Tax (net subsidy) rate on intermediate demand SLiDE._partition_ta0! SLiDE._disagg_ta0!\ntm (yr,r,g) Import tariff SLiDE._partition_tm0! SLiDE._disagg_tm0!\nmd (yr,r,m,g) Margin demand SLiDE._partition_md0! SLiDE._disagg_md0!\nnm (yr,r,g,m) National margin supply SLiDE._disagg_nm0!\ndm (yr,r,g,m) State-level margin supply SLiDE._disagg_dm0!\nc (yr,r)  SLiDE._disagg_c0!\nrx (yr,r,g)  SLiDE._disagg_rx0!\nty (yr,r,g)  SLiDE._disagg_ty0\nhhadj (yr,r)  SLiDE._disagg_hhadj!","category":"page"}]
}
